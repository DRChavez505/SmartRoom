
c:/Users/daniu/Documents/iot/SmartRoom/SmartRoom/target/4.0.2/argon/SmartRoom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000026f4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6710  000b6710  00006710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b6734  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  2003e58c  000b6738  0001e58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001c8  2003e628  2003e628  0002e628  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b67d4  000b67d4  000267d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b67fc  000b67fc  000267fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0010c00b  00000000  00000000  00026800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000120cc  00000000  00000000  0013280b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00038f4f  00000000  00000000  001448d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002e08  00000000  00000000  0017d826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a558  00000000  00000000  0018062e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037efe  00000000  00000000  0018ab86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c67c  00000000  00000000  001c2a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001336b4  00000000  00000000  001ff100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000080a0  00000000  00000000  003327b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fe8b 	bl	b5d48 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fe93 	bl	b5d64 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e58c 	.word	0x2003e58c
   b4048:	000b6738 	.word	0x000b6738
   b404c:	2003e628 	.word	0x2003e628
   b4050:	2003e628 	.word	0x2003e628
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 febb 	bl	b4dd8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b66e4 	.word	0x000b66e4
   b407c:	000b670c 	.word	0x000b670c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b90c 	b.w	b429c <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f977 	bl	b4378 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 be5b 	b.w	b4d48 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bc65 	b.w	b4960 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bc63 	b.w	b4960 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bc69 	b.w	b4970 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ae:	b40e      	push	{r1, r2, r3}
   b40b0:	b503      	push	{r0, r1, lr}
   b40b2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40bc:	f000 fdd5 	bl	b4c6a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c0:	b002      	add	sp, #8
   b40c2:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c6:	b003      	add	sp, #12
   b40c8:	4770      	bx	lr
	...

000b40cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b40cc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b40ce:	6984      	ldr	r4, [r0, #24]
   b40d0:	4b0a      	ldr	r3, [pc, #40]	; (b40fc <_ZN9TCPClientD1Ev+0x30>)
   b40d2:	6003      	str	r3, [r0, #0]
   b40d4:	4605      	mov	r5, r0
   b40d6:	b17c      	cbz	r4, b40f8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b40d8:	6863      	ldr	r3, [r4, #4]
   b40da:	3b01      	subs	r3, #1
   b40dc:	6063      	str	r3, [r4, #4]
   b40de:	b95b      	cbnz	r3, b40f8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b40e0:	6823      	ldr	r3, [r4, #0]
   b40e2:	4620      	mov	r0, r4
   b40e4:	689b      	ldr	r3, [r3, #8]
   b40e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b40e8:	68a3      	ldr	r3, [r4, #8]
   b40ea:	3b01      	subs	r3, #1
   b40ec:	60a3      	str	r3, [r4, #8]
   b40ee:	b91b      	cbnz	r3, b40f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b40f0:	6823      	ldr	r3, [r4, #0]
   b40f2:	4620      	mov	r0, r4
   b40f4:	68db      	ldr	r3, [r3, #12]
   b40f6:	4798      	blx	r3
   b40f8:	4628      	mov	r0, r5
   b40fa:	bd38      	pop	{r3, r4, r5, pc}
   b40fc:	000b649c 	.word	0x000b649c

000b4100 <_ZN9TCPClientD0Ev>:
   b4100:	b510      	push	{r4, lr}
   b4102:	4604      	mov	r4, r0
   b4104:	f7ff ffe2 	bl	b40cc <_ZN9TCPClientD1Ev>
   b4108:	4620      	mov	r0, r4
   b410a:	211c      	movs	r1, #28
   b410c:	f7ff ffc5 	bl	b409a <_ZdlPvj>
   b4110:	4620      	mov	r0, r4
   b4112:	bd10      	pop	{r4, pc}

000b4114 <_Z8switchONi>:
TCPClient WemoClient;

int wemoPort = 49153;
const char *wemoIP[5] = {"192.168.1.30","192.168.1.31","192.168.1.32","192.168.1.33","192.168.1.34"};

void switchON(int wemo) {
   b4114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  
  String data1;
   b4116:	4925      	ldr	r1, [pc, #148]	; (b41ac <_Z8switchONi+0x98>)
void switchON(int wemo) {
   b4118:	4604      	mov	r4, r0
  String data1;
   b411a:	4668      	mov	r0, sp
   b411c:	f000 fcfd 	bl	b4b1a <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("SwitchON %i \n",wemo);
   b4120:	f000 ff7c 	bl	b501c <_Z16_fetch_usbserialv>
   b4124:	4622      	mov	r2, r4
   b4126:	4922      	ldr	r1, [pc, #136]	; (b41b0 <_Z8switchONi+0x9c>)
   b4128:	f7ff ffc1 	bl	b40ae <_ZN5Print6printfEPKcz>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b412c:	4921      	ldr	r1, [pc, #132]	; (b41b4 <_Z8switchONi+0xa0>)
   b412e:	4668      	mov	r0, sp
   b4130:	f000 fd1e 	bl	b4b70 <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>1</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b4134:	4a20      	ldr	r2, [pc, #128]	; (b41b8 <_Z8switchONi+0xa4>)
   b4136:	4921      	ldr	r1, [pc, #132]	; (b41bc <_Z8switchONi+0xa8>)
   b4138:	8812      	ldrh	r2, [r2, #0]
   b413a:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b413e:	4820      	ldr	r0, [pc, #128]	; (b41c0 <_Z8switchONi+0xac>)
   b4140:	2300      	movs	r3, #0
   b4142:	f001 f8e5 	bl	b5310 <_ZN9TCPClient7connectEPKctm>
   b4146:	b328      	cbz	r0, b4194 <_Z8switchONi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b4148:	491e      	ldr	r1, [pc, #120]	; (b41c4 <_Z8switchONi+0xb0>)
   b414a:	481d      	ldr	r0, [pc, #116]	; (b41c0 <_Z8switchONi+0xac>)
   b414c:	f000 fd65 	bl	b4c1a <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b4150:	491d      	ldr	r1, [pc, #116]	; (b41c8 <_Z8switchONi+0xb4>)
   b4152:	481b      	ldr	r0, [pc, #108]	; (b41c0 <_Z8switchONi+0xac>)
   b4154:	f000 fd61 	bl	b4c1a <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b4158:	491c      	ldr	r1, [pc, #112]	; (b41cc <_Z8switchONi+0xb8>)
   b415a:	4819      	ldr	r0, [pc, #100]	; (b41c0 <_Z8switchONi+0xac>)
   b415c:	f000 fd5d 	bl	b4c1a <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b4160:	491b      	ldr	r1, [pc, #108]	; (b41d0 <_Z8switchONi+0xbc>)
   b4162:	4817      	ldr	r0, [pc, #92]	; (b41c0 <_Z8switchONi+0xac>)
   b4164:	f000 fd59 	bl	b4c1a <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b4168:	491a      	ldr	r1, [pc, #104]	; (b41d4 <_Z8switchONi+0xc0>)
   b416a:	4815      	ldr	r0, [pc, #84]	; (b41c0 <_Z8switchONi+0xac>)
   b416c:	f000 fd42 	bl	b4bf4 <_ZN5Print5printEPKc>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4170:	9902      	ldr	r1, [sp, #8]
   b4172:	4813      	ldr	r0, [pc, #76]	; (b41c0 <_Z8switchONi+0xac>)
   b4174:	220a      	movs	r2, #10
   b4176:	f000 fd5a 	bl	b4c2e <_ZN5Print11printNumberEmh>
        n += println();
   b417a:	4811      	ldr	r0, [pc, #68]	; (b41c0 <_Z8switchONi+0xac>)
   b417c:	f000 fd41 	bl	b4c02 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b4180:	480f      	ldr	r0, [pc, #60]	; (b41c0 <_Z8switchONi+0xac>)
   b4182:	f000 fd3e 	bl	b4c02 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b4186:	9900      	ldr	r1, [sp, #0]
   b4188:	480d      	ldr	r0, [pc, #52]	; (b41c0 <_Z8switchONi+0xac>)
   b418a:	f000 fd33 	bl	b4bf4 <_ZN5Print5printEPKc>
        WemoClient.println();
   b418e:	480c      	ldr	r0, [pc, #48]	; (b41c0 <_Z8switchONi+0xac>)
   b4190:	f000 fd37 	bl	b4c02 <_ZN5Print7printlnEv>
    }

  if (WemoClient.connected()) {
   b4194:	480a      	ldr	r0, [pc, #40]	; (b41c0 <_Z8switchONi+0xac>)
   b4196:	f001 f939 	bl	b540c <_ZN9TCPClient9connectedEv>
   b419a:	b110      	cbz	r0, b41a2 <_Z8switchONi+0x8e>
     WemoClient.stop();
   b419c:	4808      	ldr	r0, [pc, #32]	; (b41c0 <_Z8switchONi+0xac>)
   b419e:	f001 fa6d 	bl	b567c <_ZN9TCPClient4stopEv>
  String data1;
   b41a2:	4668      	mov	r0, sp
   b41a4:	f000 fc6e 	bl	b4a84 <_ZN6StringD1Ev>
  }
}
   b41a8:	b004      	add	sp, #16
   b41aa:	bd10      	pop	{r4, pc}
   b41ac:	000b62d7 	.word	0x000b62d7
   b41b0:	000b5fb1 	.word	0x000b5fb1
   b41b4:	000b5fbf 	.word	0x000b5fbf
   b41b8:	2003e5b8 	.word	0x2003e5b8
   b41bc:	2003e5a4 	.word	0x2003e5a4
   b41c0:	2003e670 	.word	0x2003e670
   b41c4:	000b60eb 	.word	0x000b60eb
   b41c8:	000b6113 	.word	0x000b6113
   b41cc:	000b6139 	.word	0x000b6139
   b41d0:	000b6176 	.word	0x000b6176
   b41d4:	000b5f70 	.word	0x000b5f70

000b41d8 <_Z9switchOFFi>:

void switchOFF(int wemo){
   b41d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String data1;
   b41da:	4925      	ldr	r1, [pc, #148]	; (b4270 <_Z9switchOFFi+0x98>)
void switchOFF(int wemo){
   b41dc:	4604      	mov	r4, r0
  String data1;
   b41de:	4668      	mov	r0, sp
   b41e0:	f000 fc9b 	bl	b4b1a <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("switchOFF %i \n",wemo);
   b41e4:	f000 ff1a 	bl	b501c <_Z16_fetch_usbserialv>
   b41e8:	4622      	mov	r2, r4
   b41ea:	4922      	ldr	r1, [pc, #136]	; (b4274 <_Z9switchOFFi+0x9c>)
   b41ec:	f7ff ff5f 	bl	b40ae <_ZN5Print6printfEPKcz>
   b41f0:	4921      	ldr	r1, [pc, #132]	; (b4278 <_Z9switchOFFi+0xa0>)
   b41f2:	4668      	mov	r0, sp
   b41f4:	f000 fcbc 	bl	b4b70 <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>0</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b41f8:	4a20      	ldr	r2, [pc, #128]	; (b427c <_Z9switchOFFi+0xa4>)
   b41fa:	4921      	ldr	r1, [pc, #132]	; (b4280 <_Z9switchOFFi+0xa8>)
   b41fc:	8812      	ldrh	r2, [r2, #0]
   b41fe:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b4202:	4820      	ldr	r0, [pc, #128]	; (b4284 <_Z9switchOFFi+0xac>)
   b4204:	2300      	movs	r3, #0
   b4206:	f001 f883 	bl	b5310 <_ZN9TCPClient7connectEPKctm>
   b420a:	b328      	cbz	r0, b4258 <_Z9switchOFFi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b420c:	491e      	ldr	r1, [pc, #120]	; (b4288 <_Z9switchOFFi+0xb0>)
   b420e:	481d      	ldr	r0, [pc, #116]	; (b4284 <_Z9switchOFFi+0xac>)
   b4210:	f000 fd03 	bl	b4c1a <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b4214:	491d      	ldr	r1, [pc, #116]	; (b428c <_Z9switchOFFi+0xb4>)
   b4216:	481b      	ldr	r0, [pc, #108]	; (b4284 <_Z9switchOFFi+0xac>)
   b4218:	f000 fcff 	bl	b4c1a <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b421c:	491c      	ldr	r1, [pc, #112]	; (b4290 <_Z9switchOFFi+0xb8>)
   b421e:	4819      	ldr	r0, [pc, #100]	; (b4284 <_Z9switchOFFi+0xac>)
   b4220:	f000 fcfb 	bl	b4c1a <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b4224:	491b      	ldr	r1, [pc, #108]	; (b4294 <_Z9switchOFFi+0xbc>)
   b4226:	4817      	ldr	r0, [pc, #92]	; (b4284 <_Z9switchOFFi+0xac>)
   b4228:	f000 fcf7 	bl	b4c1a <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b422c:	491a      	ldr	r1, [pc, #104]	; (b4298 <_Z9switchOFFi+0xc0>)
   b422e:	4815      	ldr	r0, [pc, #84]	; (b4284 <_Z9switchOFFi+0xac>)
   b4230:	f000 fce0 	bl	b4bf4 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b4234:	9902      	ldr	r1, [sp, #8]
   b4236:	4813      	ldr	r0, [pc, #76]	; (b4284 <_Z9switchOFFi+0xac>)
   b4238:	220a      	movs	r2, #10
   b423a:	f000 fcf8 	bl	b4c2e <_ZN5Print11printNumberEmh>
        n += println();
   b423e:	4811      	ldr	r0, [pc, #68]	; (b4284 <_Z9switchOFFi+0xac>)
   b4240:	f000 fcdf 	bl	b4c02 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b4244:	480f      	ldr	r0, [pc, #60]	; (b4284 <_Z9switchOFFi+0xac>)
   b4246:	f000 fcdc 	bl	b4c02 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b424a:	9900      	ldr	r1, [sp, #0]
   b424c:	480d      	ldr	r0, [pc, #52]	; (b4284 <_Z9switchOFFi+0xac>)
   b424e:	f000 fcd1 	bl	b4bf4 <_ZN5Print5printEPKc>
        WemoClient.println();
   b4252:	480c      	ldr	r0, [pc, #48]	; (b4284 <_Z9switchOFFi+0xac>)
   b4254:	f000 fcd5 	bl	b4c02 <_ZN5Print7printlnEv>
    }
   
  if (WemoClient.connected()) {
   b4258:	480a      	ldr	r0, [pc, #40]	; (b4284 <_Z9switchOFFi+0xac>)
   b425a:	f001 f8d7 	bl	b540c <_ZN9TCPClient9connectedEv>
   b425e:	b110      	cbz	r0, b4266 <_Z9switchOFFi+0x8e>
     WemoClient.stop();
   b4260:	4808      	ldr	r0, [pc, #32]	; (b4284 <_Z9switchOFFi+0xac>)
   b4262:	f001 fa0b 	bl	b567c <_ZN9TCPClient4stopEv>
  String data1;
   b4266:	4668      	mov	r0, sp
   b4268:	f000 fc0c 	bl	b4a84 <_ZN6StringD1Ev>
  }
}
   b426c:	b004      	add	sp, #16
   b426e:	bd10      	pop	{r4, pc}
   b4270:	000b62d7 	.word	0x000b62d7
   b4274:	000b618d 	.word	0x000b618d
   b4278:	000b619c 	.word	0x000b619c
   b427c:	2003e5b8 	.word	0x2003e5b8
   b4280:	2003e5a4 	.word	0x2003e5a4
   b4284:	2003e670 	.word	0x2003e670
   b4288:	000b60eb 	.word	0x000b60eb
   b428c:	000b6113 	.word	0x000b6113
   b4290:	000b6139 	.word	0x000b6139
   b4294:	000b6176 	.word	0x000b6176
   b4298:	000b5f70 	.word	0x000b5f70

000b429c <setup>:
int photoValue;

SYSTEM_MODE(AUTOMATIC);

void setup() 
{
   b429c:	b570      	push	{r4, r5, r6, lr}
   b429e:	b094      	sub	sp, #80	; 0x50
  Serial.begin(9600);
   b42a0:	f000 febc 	bl	b501c <_Z16_fetch_usbserialv>
   b42a4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b42a8:	f000 fea8 	bl	b4ffc <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b42ac:	2000      	movs	r0, #0
   b42ae:	f000 f993 	bl	b45d8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b42b2:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b42b6:	4604      	mov	r4, r0
   b42b8:	2000      	movs	r0, #0
   b42ba:	f000 f98d 	bl	b45d8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b42be:	1b00      	subs	r0, r0, r4
   b42c0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b42c4:	42a8      	cmp	r0, r5
   b42c6:	f171 0300 	sbcs.w	r3, r1, #0
   b42ca:	d207      	bcs.n	b42dc <setup+0x40>
waitFor(Serial.isConnected,15000);
   b42cc:	f000 fea6 	bl	b501c <_Z16_fetch_usbserialv>
   b42d0:	f000 fe98 	bl	b5004 <_ZN9USBSerial11isConnectedEv>
   b42d4:	b910      	cbnz	r0, b42dc <setup+0x40>
            spark_process();
   b42d6:	f000 fb33 	bl	b4940 <spark_process>
        while (_while() && !_condition()) {
   b42da:	e7ed      	b.n	b42b8 <setup+0x1c>
   b42dc:	f000 fe9e 	bl	b501c <_Z16_fetch_usbserialv>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b42e0:	4d21      	ldr	r5, [pc, #132]	; (b4368 <setup+0xcc>)
  WiFi.on();
  WiFi.setCredentials("IoTNetwork");

  WiFi.connect();
  while(WiFi.connecting()) {
    Serial.printf(".");
   b42e2:	4e22      	ldr	r6, [pc, #136]	; (b436c <setup+0xd0>)
waitFor(Serial.isConnected,15000);
   b42e4:	f000 fe8e 	bl	b5004 <_ZN9USBSerial11isConnectedEv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b42e8:	2300      	movs	r3, #0
   b42ea:	461a      	mov	r2, r3
   b42ec:	4619      	mov	r1, r3
   b42ee:	6868      	ldr	r0, [r5, #4]
   b42f0:	f000 fade 	bl	b48b0 <network_on>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   b42f4:	2238      	movs	r2, #56	; 0x38
   b42f6:	2100      	movs	r1, #0
   b42f8:	a806      	add	r0, sp, #24
   b42fa:	f001 fd33 	bl	b5d64 <memset>
        creds.size = sizeof(creds);
   b42fe:	234c      	movs	r3, #76	; 0x4c
   b4300:	9301      	str	r3, [sp, #4]
        creds.ssid = ssid;
   b4302:	4b1b      	ldr	r3, [pc, #108]	; (b4370 <setup+0xd4>)
   b4304:	9302      	str	r3, [sp, #8]
        creds.ssid_len = ssidLen;
        creds.password = password;
   b4306:	220a      	movs	r2, #10
   b4308:	2300      	movs	r3, #0
   b430a:	e9cd 2303 	strd	r2, r3, [sp, #12]
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b430e:	4619      	mov	r1, r3
   b4310:	aa01      	add	r2, sp, #4
   b4312:	6868      	ldr	r0, [r5, #4]
        creds.password_len = passwordLen;
   b4314:	9305      	str	r3, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   b4316:	f000 faeb 	bl	b48f0 <network_set_credentials>
        network_connect(*this, flags, 0, NULL);
   b431a:	2300      	movs	r3, #0
   b431c:	6868      	ldr	r0, [r5, #4]
   b431e:	461a      	mov	r2, r3
   b4320:	4619      	mov	r1, r3
   b4322:	f000 faa5 	bl	b4870 <network_connect>
        return network_connecting(*this, 0, NULL);
   b4326:	2200      	movs	r2, #0
   b4328:	6868      	ldr	r0, [r5, #4]
   b432a:	4611      	mov	r1, r2
   b432c:	f000 faa8 	bl	b4880 <network_connecting>
  while(WiFi.connecting()) {
   b4330:	4604      	mov	r4, r0
   b4332:	b128      	cbz	r0, b4340 <setup+0xa4>
    Serial.printf(".");
   b4334:	f000 fe72 	bl	b501c <_Z16_fetch_usbserialv>
   b4338:	4631      	mov	r1, r6
   b433a:	f7ff feb8 	bl	b40ae <_ZN5Print6printfEPKcz>
  while(WiFi.connecting()) {
   b433e:	e7f2      	b.n	b4326 <setup+0x8a>
  }
  delay(1000);
   b4340:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4344:	f000 fcd4 	bl	b4cf0 <delay>
  Serial.printf("\n\n");
   b4348:	f000 fe68 	bl	b501c <_Z16_fetch_usbserialv>
   b434c:	4909      	ldr	r1, [pc, #36]	; (b4374 <setup+0xd8>)
   b434e:	f7ff feae 	bl	b40ae <_ZN5Print6printfEPKcz>
  pinMode(laserPin, OUTPUT);
   b4352:	2101      	movs	r1, #1
   b4354:	2004      	movs	r0, #4
   b4356:	f001 fb1d 	bl	b5994 <pinMode>
  pinMode(photoPin, INPUT);
   b435a:	4621      	mov	r1, r4
   b435c:	2011      	movs	r0, #17
}
   b435e:	b014      	add	sp, #80	; 0x50
   b4360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  pinMode(photoPin, INPUT);
   b4364:	f001 bb16 	b.w	b5994 <pinMode>
   b4368:	2003e70c 	.word	0x2003e70c
   b436c:	000b62d3 	.word	0x000b62d3
   b4370:	000b62c8 	.word	0x000b62c8
   b4374:	000b62d5 	.word	0x000b62d5

000b4378 <loop>:

void loop()
{
   b4378:	b510      	push	{r4, lr}
{
    Serial.printf("Turning on Wemo# %i\n",MYWEMO);
   b437a:	f000 fe4f 	bl	b501c <_Z16_fetch_usbserialv>
   b437e:	4916      	ldr	r1, [pc, #88]	; (b43d8 <loop+0x60>)
    Serial.printf("Turning off Wemo# %i\n",MYWEMO);
    switchOFF(MYWEMO);
    delay(5000);
}
  digitalWrite(laserPin, HIGH);
  photoValue=analogRead(photoPin);
   b4380:	4c16      	ldr	r4, [pc, #88]	; (b43dc <loop+0x64>)
    Serial.printf("Turning on Wemo# %i\n",MYWEMO);
   b4382:	2200      	movs	r2, #0
   b4384:	f7ff fe93 	bl	b40ae <_ZN5Print6printfEPKcz>
    switchON(MYWEMO);
   b4388:	2000      	movs	r0, #0
   b438a:	f7ff fec3 	bl	b4114 <_Z8switchONi>
    delay(5000);
   b438e:	f241 3088 	movw	r0, #5000	; 0x1388
   b4392:	f000 fcad 	bl	b4cf0 <delay>
    Serial.printf("Turning off Wemo# %i\n",MYWEMO);
   b4396:	f000 fe41 	bl	b501c <_Z16_fetch_usbserialv>
   b439a:	2200      	movs	r2, #0
   b439c:	4910      	ldr	r1, [pc, #64]	; (b43e0 <loop+0x68>)
   b439e:	f7ff fe86 	bl	b40ae <_ZN5Print6printfEPKcz>
    switchOFF(MYWEMO);
   b43a2:	2000      	movs	r0, #0
   b43a4:	f7ff ff18 	bl	b41d8 <_Z9switchOFFi>
    delay(5000);
   b43a8:	f241 3088 	movw	r0, #5000	; 0x1388
   b43ac:	f000 fca0 	bl	b4cf0 <delay>
  digitalWrite(laserPin, HIGH);
   b43b0:	2101      	movs	r1, #1
   b43b2:	2004      	movs	r0, #4
   b43b4:	f001 faff 	bl	b59b6 <digitalWrite>
  photoValue=analogRead(photoPin);
   b43b8:	2011      	movs	r0, #17
   b43ba:	f001 fb15 	bl	b59e8 <analogRead>
   b43be:	6020      	str	r0, [r4, #0]
  Serial.printf("photoValue=analogRead %d\r",photoValue);
   b43c0:	f000 fe2c 	bl	b501c <_Z16_fetch_usbserialv>
   b43c4:	6822      	ldr	r2, [r4, #0]
   b43c6:	4907      	ldr	r1, [pc, #28]	; (b43e4 <loop+0x6c>)
   b43c8:	f7ff fe71 	bl	b40ae <_ZN5Print6printfEPKcz>
  delay(1000);
}
   b43cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(1000);
   b43d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b43d4:	f000 bc8c 	b.w	b4cf0 <delay>
   b43d8:	000b62d8 	.word	0x000b62d8
   b43dc:	2003e69c 	.word	0x2003e69c
   b43e0:	000b62ed 	.word	0x000b62ed
   b43e4:	000b6303 	.word	0x000b6303

000b43e8 <_GLOBAL__sub_I_hueOn>:
}
   b43e8:	b508      	push	{r3, lr}

//  Hue variables
bool hueOn;  // on/off
int hueBri;  // brightness value
long hueHue;  // hue value
String hueCmd;  // Hue command
   b43ea:	4919      	ldr	r1, [pc, #100]	; (b4450 <_GLOBAL__sub_I_hueOn+0x68>)
   b43ec:	4819      	ldr	r0, [pc, #100]	; (b4454 <_GLOBAL__sub_I_hueOn+0x6c>)
   b43ee:	f000 fb94 	bl	b4b1a <_ZN6StringC1EPK19__FlashStringHelper>
int HueYellow = 10000;
int HueGreen = 22500;
int HueBlue = 45000;
int HueIndigo = 47500;
int HueViolet = 50000;
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b43f2:	4a19      	ldr	r2, [pc, #100]	; (b4458 <_GLOBAL__sub_I_hueOn+0x70>)
   b43f4:	4b19      	ldr	r3, [pc, #100]	; (b445c <_GLOBAL__sub_I_hueOn+0x74>)
   b43f6:	6812      	ldr	r2, [r2, #0]
   b43f8:	601a      	str	r2, [r3, #0]
   b43fa:	4a19      	ldr	r2, [pc, #100]	; (b4460 <_GLOBAL__sub_I_hueOn+0x78>)

TCPClient HueClient;
   b43fc:	4819      	ldr	r0, [pc, #100]	; (b4464 <_GLOBAL__sub_I_hueOn+0x7c>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b43fe:	6812      	ldr	r2, [r2, #0]
   b4400:	605a      	str	r2, [r3, #4]
   b4402:	4a19      	ldr	r2, [pc, #100]	; (b4468 <_GLOBAL__sub_I_hueOn+0x80>)
   b4404:	6812      	ldr	r2, [r2, #0]
   b4406:	609a      	str	r2, [r3, #8]
   b4408:	4a18      	ldr	r2, [pc, #96]	; (b446c <_GLOBAL__sub_I_hueOn+0x84>)
   b440a:	6812      	ldr	r2, [r2, #0]
   b440c:	60da      	str	r2, [r3, #12]
   b440e:	4a18      	ldr	r2, [pc, #96]	; (b4470 <_GLOBAL__sub_I_hueOn+0x88>)
   b4410:	6812      	ldr	r2, [r2, #0]
   b4412:	611a      	str	r2, [r3, #16]
   b4414:	4a17      	ldr	r2, [pc, #92]	; (b4474 <_GLOBAL__sub_I_hueOn+0x8c>)
   b4416:	6812      	ldr	r2, [r2, #0]
   b4418:	615a      	str	r2, [r3, #20]
   b441a:	4a17      	ldr	r2, [pc, #92]	; (b4478 <_GLOBAL__sub_I_hueOn+0x90>)
   b441c:	6812      	ldr	r2, [r2, #0]
   b441e:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b4420:	f001 f976 	bl	b5710 <_ZN9TCPClientC1Ev>
TCPClient WemoClient;
   b4424:	4815      	ldr	r0, [pc, #84]	; (b447c <_GLOBAL__sub_I_hueOn+0x94>)
   b4426:	f001 f973 	bl	b5710 <_ZN9TCPClientC1Ev>
Adafruit_NeoPixel pixel (WS2812B);
   b442a:	2302      	movs	r3, #2
   b442c:	461a      	mov	r2, r3
   b442e:	4619      	mov	r1, r3
   b4430:	4813      	ldr	r0, [pc, #76]	; (b4480 <_GLOBAL__sub_I_hueOn+0x98>)
   b4432:	f000 f860 	bl	b44f6 <_ZN17Adafruit_NeoPixelC1Ethh>
              error_(SYSTEM_ERROR_NONE) {
   b4436:	4b13      	ldr	r3, [pc, #76]	; (b4484 <_GLOBAL__sub_I_hueOn+0x9c>)
   b4438:	2200      	movs	r2, #0
   b443a:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b443e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4442:	609a      	str	r2, [r3, #8]
}
   b4444:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_system_mode(mode);
   b4448:	2001      	movs	r0, #1
   b444a:	f000 b9ed 	b.w	b4828 <set_system_mode>
   b444e:	bf00      	nop
   b4450:	000b62d7 	.word	0x000b62d7
   b4454:	2003e68c 	.word	0x2003e68c
   b4458:	2003e660 	.word	0x2003e660
   b445c:	2003e644 	.word	0x2003e644
   b4460:	2003e598 	.word	0x2003e598
   b4464:	2003e628 	.word	0x2003e628
   b4468:	2003e5a0 	.word	0x2003e5a0
   b446c:	2003e590 	.word	0x2003e590
   b4470:	2003e58c 	.word	0x2003e58c
   b4474:	2003e594 	.word	0x2003e594
   b4478:	2003e59c 	.word	0x2003e59c
   b447c:	2003e670 	.word	0x2003e670
   b4480:	2003e6a0 	.word	0x2003e6a0
   b4484:	2003e664 	.word	0x2003e664

000b4488 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4488:	b538      	push	{r3, r4, r5, lr}
   b448a:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b448c:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b448e:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b4490:	b108      	cbz	r0, b4496 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b4492:	f000 fa6d 	bl	b4970 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b4496:	79a3      	ldrb	r3, [r4, #6]
   b4498:	2b06      	cmp	r3, #6
   b449a:	bf0c      	ite	eq
   b449c:	2004      	moveq	r0, #4
   b449e:	2003      	movne	r0, #3
   b44a0:	fb10 f005 	smulbb	r0, r0, r5
   b44a4:	b280      	uxth	r0, r0
   b44a6:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b44a8:	f000 fa5a 	bl	b4960 <malloc>
   b44ac:	60e0      	str	r0, [r4, #12]
   b44ae:	b128      	cbz	r0, b44bc <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b44b0:	88a2      	ldrh	r2, [r4, #4]
   b44b2:	2100      	movs	r1, #0
   b44b4:	f001 fc56 	bl	b5d64 <memset>
    numLEDs = n;
   b44b8:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b44ba:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b44bc:	80a0      	strh	r0, [r4, #4]
   b44be:	8060      	strh	r0, [r4, #2]
}
   b44c0:	e7fb      	b.n	b44ba <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b44c2 <_ZN17Adafruit_NeoPixel6setPinEh>:
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b44c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b44c4:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b44c6:	4605      	mov	r5, r0
   b44c8:	460c      	mov	r4, r1
    if (begun) {
   b44ca:	b11b      	cbz	r3, b44d4 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b44cc:	79c0      	ldrb	r0, [r0, #7]
   b44ce:	2100      	movs	r1, #0
   b44d0:	f001 fa60 	bl	b5994 <pinMode>
    }
    pin = p;
    if (begun) {
   b44d4:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b44d6:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b44d8:	b15b      	cbz	r3, b44f2 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b44da:	b2a0      	uxth	r0, r4
   b44dc:	2101      	movs	r1, #1
   b44de:	9001      	str	r0, [sp, #4]
   b44e0:	f001 fa58 	bl	b5994 <pinMode>
        digitalWrite(p, LOW);
   b44e4:	9801      	ldr	r0, [sp, #4]
   b44e6:	2100      	movs	r1, #0
    }
}
   b44e8:	b003      	add	sp, #12
   b44ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b44ee:	f001 ba62 	b.w	b59b6 <digitalWrite>
}
   b44f2:	b003      	add	sp, #12
   b44f4:	bd30      	pop	{r4, r5, pc}

000b44f6 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b44f6:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b44f8:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b44fa:	4604      	mov	r4, r0
   b44fc:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b44fe:	7183      	strb	r3, [r0, #6]
   b4500:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b4504:	7005      	strb	r5, [r0, #0]
   b4506:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b4508:	f7ff ffbe 	bl	b4488 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b450c:	4620      	mov	r0, r4
   b450e:	4631      	mov	r1, r6
   b4510:	f7ff ffd7 	bl	b44c2 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b4514:	4620      	mov	r0, r4
   b4516:	bd70      	pop	{r4, r5, r6, pc}

000b4518 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b4518:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b451a:	f000 f815 	bl	b4548 <HAL_Pin_Map>
   b451e:	4b01      	ldr	r3, [pc, #4]	; (b4524 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b4520:	6018      	str	r0, [r3, #0]
}
   b4522:	bd08      	pop	{r3, pc}
   b4524:	2003e6b4 	.word	0x2003e6b4

000b4528 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4528:	b508      	push	{r3, lr}
   b452a:	4b02      	ldr	r3, [pc, #8]	; (b4534 <netdb_freeaddrinfo+0xc>)
   b452c:	681b      	ldr	r3, [r3, #0]
   b452e:	689b      	ldr	r3, [r3, #8]
   b4530:	9301      	str	r3, [sp, #4]
   b4532:	bd08      	pop	{r3, pc}
   b4534:	00030268 	.word	0x00030268

000b4538 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4538:	b508      	push	{r3, lr}
   b453a:	4b02      	ldr	r3, [pc, #8]	; (b4544 <netdb_getaddrinfo+0xc>)
   b453c:	681b      	ldr	r3, [r3, #0]
   b453e:	68db      	ldr	r3, [r3, #12]
   b4540:	9301      	str	r3, [sp, #4]
   b4542:	bd08      	pop	{r3, pc}
   b4544:	00030268 	.word	0x00030268

000b4548 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b4548:	b508      	push	{r3, lr}
   b454a:	4b02      	ldr	r3, [pc, #8]	; (b4554 <HAL_Pin_Map+0xc>)
   b454c:	681b      	ldr	r3, [r3, #0]
   b454e:	681b      	ldr	r3, [r3, #0]
   b4550:	9301      	str	r3, [sp, #4]
   b4552:	bd08      	pop	{r3, pc}
   b4554:	0003022c 	.word	0x0003022c

000b4558 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b4558:	b508      	push	{r3, lr}
   b455a:	4b02      	ldr	r3, [pc, #8]	; (b4564 <HAL_Validate_Pin_Function+0xc>)
   b455c:	681b      	ldr	r3, [r3, #0]
   b455e:	685b      	ldr	r3, [r3, #4]
   b4560:	9301      	str	r3, [sp, #4]
   b4562:	bd08      	pop	{r3, pc}
   b4564:	0003022c 	.word	0x0003022c

000b4568 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4568:	b508      	push	{r3, lr}
   b456a:	4b02      	ldr	r3, [pc, #8]	; (b4574 <HAL_Pin_Mode+0xc>)
   b456c:	681b      	ldr	r3, [r3, #0]
   b456e:	689b      	ldr	r3, [r3, #8]
   b4570:	9301      	str	r3, [sp, #4]
   b4572:	bd08      	pop	{r3, pc}
   b4574:	0003022c 	.word	0x0003022c

000b4578 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4578:	b508      	push	{r3, lr}
   b457a:	4b02      	ldr	r3, [pc, #8]	; (b4584 <HAL_Get_Pin_Mode+0xc>)
   b457c:	681b      	ldr	r3, [r3, #0]
   b457e:	68db      	ldr	r3, [r3, #12]
   b4580:	9301      	str	r3, [sp, #4]
   b4582:	bd08      	pop	{r3, pc}
   b4584:	0003022c 	.word	0x0003022c

000b4588 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4588:	b508      	push	{r3, lr}
   b458a:	4b02      	ldr	r3, [pc, #8]	; (b4594 <HAL_GPIO_Write+0xc>)
   b458c:	681b      	ldr	r3, [r3, #0]
   b458e:	691b      	ldr	r3, [r3, #16]
   b4590:	9301      	str	r3, [sp, #4]
   b4592:	bd08      	pop	{r3, pc}
   b4594:	0003022c 	.word	0x0003022c

000b4598 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4598:	b508      	push	{r3, lr}
   b459a:	4b02      	ldr	r3, [pc, #8]	; (b45a4 <hal_adc_read+0xc>)
   b459c:	681b      	ldr	r3, [r3, #0]
   b459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b45a0:	9301      	str	r3, [sp, #4]
   b45a2:	bd08      	pop	{r3, pc}
   b45a4:	0003022c 	.word	0x0003022c

000b45a8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b45a8:	b508      	push	{r3, lr}
   b45aa:	4b02      	ldr	r3, [pc, #8]	; (b45b4 <if_index_to_name+0xc>)
   b45ac:	681b      	ldr	r3, [r3, #0]
   b45ae:	695b      	ldr	r3, [r3, #20]
   b45b0:	9301      	str	r3, [sp, #4]
   b45b2:	bd08      	pop	{r3, pc}
   b45b4:	0003026c 	.word	0x0003026c

000b45b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b45b8:	b508      	push	{r3, lr}
   b45ba:	4b02      	ldr	r3, [pc, #8]	; (b45c4 <HAL_RNG_GetRandomNumber+0xc>)
   b45bc:	681b      	ldr	r3, [r3, #0]
   b45be:	685b      	ldr	r3, [r3, #4]
   b45c0:	9301      	str	r3, [sp, #4]
   b45c2:	bd08      	pop	{r3, pc}
   b45c4:	00030218 	.word	0x00030218

000b45c8 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b45c8:	b508      	push	{r3, lr}
   b45ca:	4b02      	ldr	r3, [pc, #8]	; (b45d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b45cc:	681b      	ldr	r3, [r3, #0]
   b45ce:	695b      	ldr	r3, [r3, #20]
   b45d0:	9301      	str	r3, [sp, #4]
   b45d2:	bd08      	pop	{r3, pc}
   b45d4:	00030218 	.word	0x00030218

000b45d8 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b45d8:	b508      	push	{r3, lr}
   b45da:	4b02      	ldr	r3, [pc, #8]	; (b45e4 <hal_timer_millis+0xc>)
   b45dc:	681b      	ldr	r3, [r3, #0]
   b45de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b45e0:	9301      	str	r3, [sp, #4]
   b45e2:	bd08      	pop	{r3, pc}
   b45e4:	00030218 	.word	0x00030218

000b45e8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b45e8:	b508      	push	{r3, lr}
   b45ea:	4b02      	ldr	r3, [pc, #8]	; (b45f4 <os_mutex_recursive_create+0xc>)
   b45ec:	681b      	ldr	r3, [r3, #0]
   b45ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45f0:	9301      	str	r3, [sp, #4]
   b45f2:	bd08      	pop	{r3, pc}
   b45f4:	00030248 	.word	0x00030248

000b45f8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b45f8:	b508      	push	{r3, lr}
   b45fa:	4b02      	ldr	r3, [pc, #8]	; (b4604 <inet_inet_ntop+0xc>)
   b45fc:	681b      	ldr	r3, [r3, #0]
   b45fe:	695b      	ldr	r3, [r3, #20]
   b4600:	9301      	str	r3, [sp, #4]
   b4602:	bd08      	pop	{r3, pc}
   b4604:	00030264 	.word	0x00030264

000b4608 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4608:	b508      	push	{r3, lr}
   b460a:	4b02      	ldr	r3, [pc, #8]	; (b4614 <inet_htonl+0xc>)
   b460c:	681b      	ldr	r3, [r3, #0]
   b460e:	6a1b      	ldr	r3, [r3, #32]
   b4610:	9301      	str	r3, [sp, #4]
   b4612:	bd08      	pop	{r3, pc}
   b4614:	00030264 	.word	0x00030264

000b4618 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4618:	b508      	push	{r3, lr}
   b461a:	4b02      	ldr	r3, [pc, #8]	; (b4624 <inet_htons+0xc>)
   b461c:	681b      	ldr	r3, [r3, #0]
   b461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4620:	9301      	str	r3, [sp, #4]
   b4622:	bd08      	pop	{r3, pc}
   b4624:	00030264 	.word	0x00030264

000b4628 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4628:	b508      	push	{r3, lr}
   b462a:	4b02      	ldr	r3, [pc, #8]	; (b4634 <hal_usart_write+0xc>)
   b462c:	681b      	ldr	r3, [r3, #0]
   b462e:	68db      	ldr	r3, [r3, #12]
   b4630:	9301      	str	r3, [sp, #4]
   b4632:	bd08      	pop	{r3, pc}
   b4634:	0003023c 	.word	0x0003023c

000b4638 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4638:	b508      	push	{r3, lr}
   b463a:	4b02      	ldr	r3, [pc, #8]	; (b4644 <hal_usart_available+0xc>)
   b463c:	681b      	ldr	r3, [r3, #0]
   b463e:	691b      	ldr	r3, [r3, #16]
   b4640:	9301      	str	r3, [sp, #4]
   b4642:	bd08      	pop	{r3, pc}
   b4644:	0003023c 	.word	0x0003023c

000b4648 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4648:	b508      	push	{r3, lr}
   b464a:	4b02      	ldr	r3, [pc, #8]	; (b4654 <hal_usart_read+0xc>)
   b464c:	681b      	ldr	r3, [r3, #0]
   b464e:	695b      	ldr	r3, [r3, #20]
   b4650:	9301      	str	r3, [sp, #4]
   b4652:	bd08      	pop	{r3, pc}
   b4654:	0003023c 	.word	0x0003023c

000b4658 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4658:	b508      	push	{r3, lr}
   b465a:	4b02      	ldr	r3, [pc, #8]	; (b4664 <hal_usart_peek+0xc>)
   b465c:	681b      	ldr	r3, [r3, #0]
   b465e:	699b      	ldr	r3, [r3, #24]
   b4660:	9301      	str	r3, [sp, #4]
   b4662:	bd08      	pop	{r3, pc}
   b4664:	0003023c 	.word	0x0003023c

000b4668 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4668:	b508      	push	{r3, lr}
   b466a:	4b02      	ldr	r3, [pc, #8]	; (b4674 <hal_usart_flush+0xc>)
   b466c:	681b      	ldr	r3, [r3, #0]
   b466e:	69db      	ldr	r3, [r3, #28]
   b4670:	9301      	str	r3, [sp, #4]
   b4672:	bd08      	pop	{r3, pc}
   b4674:	0003023c 	.word	0x0003023c

000b4678 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4678:	b508      	push	{r3, lr}
   b467a:	4b02      	ldr	r3, [pc, #8]	; (b4684 <hal_usart_is_enabled+0xc>)
   b467c:	681b      	ldr	r3, [r3, #0]
   b467e:	6a1b      	ldr	r3, [r3, #32]
   b4680:	9301      	str	r3, [sp, #4]
   b4682:	bd08      	pop	{r3, pc}
   b4684:	0003023c 	.word	0x0003023c

000b4688 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4688:	b508      	push	{r3, lr}
   b468a:	4b02      	ldr	r3, [pc, #8]	; (b4694 <hal_usart_available_data_for_write+0xc>)
   b468c:	681b      	ldr	r3, [r3, #0]
   b468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4690:	9301      	str	r3, [sp, #4]
   b4692:	bd08      	pop	{r3, pc}
   b4694:	0003023c 	.word	0x0003023c

000b4698 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4698:	b508      	push	{r3, lr}
   b469a:	4b02      	ldr	r3, [pc, #8]	; (b46a4 <hal_usart_init_ex+0xc>)
   b469c:	681b      	ldr	r3, [r3, #0]
   b469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46a0:	9301      	str	r3, [sp, #4]
   b46a2:	bd08      	pop	{r3, pc}
   b46a4:	0003023c 	.word	0x0003023c

000b46a8 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b46a8:	b508      	push	{r3, lr}
   b46aa:	4b02      	ldr	r3, [pc, #8]	; (b46b4 <hal_i2c_write+0xc>)
   b46ac:	681b      	ldr	r3, [r3, #0]
   b46ae:	6a1b      	ldr	r3, [r3, #32]
   b46b0:	9301      	str	r3, [sp, #4]
   b46b2:	bd08      	pop	{r3, pc}
   b46b4:	00030228 	.word	0x00030228

000b46b8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b46b8:	b508      	push	{r3, lr}
   b46ba:	4b02      	ldr	r3, [pc, #8]	; (b46c4 <hal_i2c_available+0xc>)
   b46bc:	681b      	ldr	r3, [r3, #0]
   b46be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b46c0:	9301      	str	r3, [sp, #4]
   b46c2:	bd08      	pop	{r3, pc}
   b46c4:	00030228 	.word	0x00030228

000b46c8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b46c8:	b508      	push	{r3, lr}
   b46ca:	4b02      	ldr	r3, [pc, #8]	; (b46d4 <hal_i2c_read+0xc>)
   b46cc:	681b      	ldr	r3, [r3, #0]
   b46ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b46d0:	9301      	str	r3, [sp, #4]
   b46d2:	bd08      	pop	{r3, pc}
   b46d4:	00030228 	.word	0x00030228

000b46d8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b46d8:	b508      	push	{r3, lr}
   b46da:	4b02      	ldr	r3, [pc, #8]	; (b46e4 <hal_i2c_peek+0xc>)
   b46dc:	681b      	ldr	r3, [r3, #0]
   b46de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46e0:	9301      	str	r3, [sp, #4]
   b46e2:	bd08      	pop	{r3, pc}
   b46e4:	00030228 	.word	0x00030228

000b46e8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b46e8:	b508      	push	{r3, lr}
   b46ea:	4b02      	ldr	r3, [pc, #8]	; (b46f4 <hal_i2c_flush+0xc>)
   b46ec:	681b      	ldr	r3, [r3, #0]
   b46ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46f0:	9301      	str	r3, [sp, #4]
   b46f2:	bd08      	pop	{r3, pc}
   b46f4:	00030228 	.word	0x00030228

000b46f8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b46f8:	b508      	push	{r3, lr}
   b46fa:	4b02      	ldr	r3, [pc, #8]	; (b4704 <hal_i2c_is_enabled+0xc>)
   b46fc:	681b      	ldr	r3, [r3, #0]
   b46fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4700:	9301      	str	r3, [sp, #4]
   b4702:	bd08      	pop	{r3, pc}
   b4704:	00030228 	.word	0x00030228

000b4708 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4708:	b508      	push	{r3, lr}
   b470a:	4b02      	ldr	r3, [pc, #8]	; (b4714 <hal_i2c_init+0xc>)
   b470c:	681b      	ldr	r3, [r3, #0]
   b470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4710:	9301      	str	r3, [sp, #4]
   b4712:	bd08      	pop	{r3, pc}
   b4714:	00030228 	.word	0x00030228

000b4718 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4718:	b508      	push	{r3, lr}
   b471a:	4b02      	ldr	r3, [pc, #8]	; (b4724 <sock_setsockopt+0xc>)
   b471c:	681b      	ldr	r3, [r3, #0]
   b471e:	699b      	ldr	r3, [r3, #24]
   b4720:	9301      	str	r3, [sp, #4]
   b4722:	bd08      	pop	{r3, pc}
   b4724:	00030238 	.word	0x00030238

000b4728 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4728:	b508      	push	{r3, lr}
   b472a:	4b02      	ldr	r3, [pc, #8]	; (b4734 <sock_close+0xc>)
   b472c:	681b      	ldr	r3, [r3, #0]
   b472e:	69db      	ldr	r3, [r3, #28]
   b4730:	9301      	str	r3, [sp, #4]
   b4732:	bd08      	pop	{r3, pc}
   b4734:	00030238 	.word	0x00030238

000b4738 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4738:	b508      	push	{r3, lr}
   b473a:	4b02      	ldr	r3, [pc, #8]	; (b4744 <sock_connect+0xc>)
   b473c:	681b      	ldr	r3, [r3, #0]
   b473e:	6a1b      	ldr	r3, [r3, #32]
   b4740:	9301      	str	r3, [sp, #4]
   b4742:	bd08      	pop	{r3, pc}
   b4744:	00030238 	.word	0x00030238

000b4748 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4748:	b508      	push	{r3, lr}
   b474a:	4b02      	ldr	r3, [pc, #8]	; (b4754 <sock_recv+0xc>)
   b474c:	681b      	ldr	r3, [r3, #0]
   b474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4750:	9301      	str	r3, [sp, #4]
   b4752:	bd08      	pop	{r3, pc}
   b4754:	00030238 	.word	0x00030238

000b4758 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4758:	b508      	push	{r3, lr}
   b475a:	4b02      	ldr	r3, [pc, #8]	; (b4764 <sock_send+0xc>)
   b475c:	681b      	ldr	r3, [r3, #0]
   b475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4760:	9301      	str	r3, [sp, #4]
   b4762:	bd08      	pop	{r3, pc}
   b4764:	00030238 	.word	0x00030238

000b4768 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4768:	b508      	push	{r3, lr}
   b476a:	4b02      	ldr	r3, [pc, #8]	; (b4774 <sock_socket+0xc>)
   b476c:	681b      	ldr	r3, [r3, #0]
   b476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4770:	9301      	str	r3, [sp, #4]
   b4772:	bd08      	pop	{r3, pc}
   b4774:	00030238 	.word	0x00030238

000b4778 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4778:	b508      	push	{r3, lr}
   b477a:	4b02      	ldr	r3, [pc, #8]	; (b4784 <hal_spi_init+0xc>)
   b477c:	681b      	ldr	r3, [r3, #0]
   b477e:	69db      	ldr	r3, [r3, #28]
   b4780:	9301      	str	r3, [sp, #4]
   b4782:	bd08      	pop	{r3, pc}
   b4784:	00030230 	.word	0x00030230

000b4788 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4788:	b508      	push	{r3, lr}
   b478a:	4b02      	ldr	r3, [pc, #8]	; (b4794 <hal_spi_is_enabled+0xc>)
   b478c:	681b      	ldr	r3, [r3, #0]
   b478e:	6a1b      	ldr	r3, [r3, #32]
   b4790:	9301      	str	r3, [sp, #4]
   b4792:	bd08      	pop	{r3, pc}
   b4794:	00030230 	.word	0x00030230

000b4798 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4798:	b508      	push	{r3, lr}
   b479a:	4b02      	ldr	r3, [pc, #8]	; (b47a4 <HAL_USB_USART_Init+0xc>)
   b479c:	681b      	ldr	r3, [r3, #0]
   b479e:	681b      	ldr	r3, [r3, #0]
   b47a0:	9301      	str	r3, [sp, #4]
   b47a2:	bd08      	pop	{r3, pc}
   b47a4:	0003024c 	.word	0x0003024c

000b47a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b47a8:	b508      	push	{r3, lr}
   b47aa:	4b02      	ldr	r3, [pc, #8]	; (b47b4 <HAL_USB_USART_Begin+0xc>)
   b47ac:	681b      	ldr	r3, [r3, #0]
   b47ae:	685b      	ldr	r3, [r3, #4]
   b47b0:	9301      	str	r3, [sp, #4]
   b47b2:	bd08      	pop	{r3, pc}
   b47b4:	0003024c 	.word	0x0003024c

000b47b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b47b8:	b508      	push	{r3, lr}
   b47ba:	4b02      	ldr	r3, [pc, #8]	; (b47c4 <HAL_USB_USART_Available_Data+0xc>)
   b47bc:	681b      	ldr	r3, [r3, #0]
   b47be:	691b      	ldr	r3, [r3, #16]
   b47c0:	9301      	str	r3, [sp, #4]
   b47c2:	bd08      	pop	{r3, pc}
   b47c4:	0003024c 	.word	0x0003024c

000b47c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b47c8:	b508      	push	{r3, lr}
   b47ca:	4b02      	ldr	r3, [pc, #8]	; (b47d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b47cc:	681b      	ldr	r3, [r3, #0]
   b47ce:	695b      	ldr	r3, [r3, #20]
   b47d0:	9301      	str	r3, [sp, #4]
   b47d2:	bd08      	pop	{r3, pc}
   b47d4:	0003024c 	.word	0x0003024c

000b47d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b47d8:	b508      	push	{r3, lr}
   b47da:	4b02      	ldr	r3, [pc, #8]	; (b47e4 <HAL_USB_USART_Receive_Data+0xc>)
   b47dc:	681b      	ldr	r3, [r3, #0]
   b47de:	699b      	ldr	r3, [r3, #24]
   b47e0:	9301      	str	r3, [sp, #4]
   b47e2:	bd08      	pop	{r3, pc}
   b47e4:	0003024c 	.word	0x0003024c

000b47e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b47e8:	b508      	push	{r3, lr}
   b47ea:	4b02      	ldr	r3, [pc, #8]	; (b47f4 <HAL_USB_USART_Send_Data+0xc>)
   b47ec:	681b      	ldr	r3, [r3, #0]
   b47ee:	69db      	ldr	r3, [r3, #28]
   b47f0:	9301      	str	r3, [sp, #4]
   b47f2:	bd08      	pop	{r3, pc}
   b47f4:	0003024c 	.word	0x0003024c

000b47f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b47f8:	b508      	push	{r3, lr}
   b47fa:	4b02      	ldr	r3, [pc, #8]	; (b4804 <HAL_USB_USART_Flush_Data+0xc>)
   b47fc:	681b      	ldr	r3, [r3, #0]
   b47fe:	6a1b      	ldr	r3, [r3, #32]
   b4800:	9301      	str	r3, [sp, #4]
   b4802:	bd08      	pop	{r3, pc}
   b4804:	0003024c 	.word	0x0003024c

000b4808 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4808:	b508      	push	{r3, lr}
   b480a:	4b02      	ldr	r3, [pc, #8]	; (b4814 <HAL_USB_USART_Is_Connected+0xc>)
   b480c:	681b      	ldr	r3, [r3, #0]
   b480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4810:	9301      	str	r3, [sp, #4]
   b4812:	bd08      	pop	{r3, pc}
   b4814:	0003024c 	.word	0x0003024c

000b4818 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b02      	ldr	r3, [pc, #8]	; (b4824 <log_message+0xc>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4820:	9301      	str	r3, [sp, #4]
   b4822:	bd08      	pop	{r3, pc}
   b4824:	00030260 	.word	0x00030260

000b4828 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4828:	b508      	push	{r3, lr}
   b482a:	4b02      	ldr	r3, [pc, #8]	; (b4834 <set_system_mode+0xc>)
   b482c:	681b      	ldr	r3, [r3, #0]
   b482e:	685b      	ldr	r3, [r3, #4]
   b4830:	9301      	str	r3, [sp, #4]
   b4832:	bd08      	pop	{r3, pc}
   b4834:	00030220 	.word	0x00030220

000b4838 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4838:	b508      	push	{r3, lr}
   b483a:	4b02      	ldr	r3, [pc, #8]	; (b4844 <system_delay_ms+0xc>)
   b483c:	681b      	ldr	r3, [r3, #0]
   b483e:	695b      	ldr	r3, [r3, #20]
   b4840:	9301      	str	r3, [sp, #4]
   b4842:	bd08      	pop	{r3, pc}
   b4844:	00030220 	.word	0x00030220

000b4848 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4848:	b508      	push	{r3, lr}
   b484a:	4b03      	ldr	r3, [pc, #12]	; (b4858 <system_ctrl_set_app_request_handler+0x10>)
   b484c:	681b      	ldr	r3, [r3, #0]
   b484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4852:	9301      	str	r3, [sp, #4]
   b4854:	bd08      	pop	{r3, pc}
   b4856:	0000      	.short	0x0000
   b4858:	00030220 	.word	0x00030220

000b485c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b485c:	b508      	push	{r3, lr}
   b485e:	4b03      	ldr	r3, [pc, #12]	; (b486c <system_ctrl_set_result+0x10>)
   b4860:	681b      	ldr	r3, [r3, #0]
   b4862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4866:	9301      	str	r3, [sp, #4]
   b4868:	bd08      	pop	{r3, pc}
   b486a:	0000      	.short	0x0000
   b486c:	00030220 	.word	0x00030220

000b4870 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4870:	b508      	push	{r3, lr}
   b4872:	4b02      	ldr	r3, [pc, #8]	; (b487c <network_connect+0xc>)
   b4874:	681b      	ldr	r3, [r3, #0]
   b4876:	685b      	ldr	r3, [r3, #4]
   b4878:	9301      	str	r3, [sp, #4]
   b487a:	bd08      	pop	{r3, pc}
   b487c:	00030240 	.word	0x00030240

000b4880 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4880:	b508      	push	{r3, lr}
   b4882:	4b02      	ldr	r3, [pc, #8]	; (b488c <network_connecting+0xc>)
   b4884:	681b      	ldr	r3, [r3, #0]
   b4886:	689b      	ldr	r3, [r3, #8]
   b4888:	9301      	str	r3, [sp, #4]
   b488a:	bd08      	pop	{r3, pc}
   b488c:	00030240 	.word	0x00030240

000b4890 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4890:	b508      	push	{r3, lr}
   b4892:	4b02      	ldr	r3, [pc, #8]	; (b489c <network_disconnect+0xc>)
   b4894:	681b      	ldr	r3, [r3, #0]
   b4896:	68db      	ldr	r3, [r3, #12]
   b4898:	9301      	str	r3, [sp, #4]
   b489a:	bd08      	pop	{r3, pc}
   b489c:	00030240 	.word	0x00030240

000b48a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b48a0:	b508      	push	{r3, lr}
   b48a2:	4b02      	ldr	r3, [pc, #8]	; (b48ac <network_ready+0xc>)
   b48a4:	681b      	ldr	r3, [r3, #0]
   b48a6:	691b      	ldr	r3, [r3, #16]
   b48a8:	9301      	str	r3, [sp, #4]
   b48aa:	bd08      	pop	{r3, pc}
   b48ac:	00030240 	.word	0x00030240

000b48b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b48b0:	b508      	push	{r3, lr}
   b48b2:	4b02      	ldr	r3, [pc, #8]	; (b48bc <network_on+0xc>)
   b48b4:	681b      	ldr	r3, [r3, #0]
   b48b6:	695b      	ldr	r3, [r3, #20]
   b48b8:	9301      	str	r3, [sp, #4]
   b48ba:	bd08      	pop	{r3, pc}
   b48bc:	00030240 	.word	0x00030240

000b48c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b48c0:	b508      	push	{r3, lr}
   b48c2:	4b02      	ldr	r3, [pc, #8]	; (b48cc <network_off+0xc>)
   b48c4:	681b      	ldr	r3, [r3, #0]
   b48c6:	699b      	ldr	r3, [r3, #24]
   b48c8:	9301      	str	r3, [sp, #4]
   b48ca:	bd08      	pop	{r3, pc}
   b48cc:	00030240 	.word	0x00030240

000b48d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b48d0:	b508      	push	{r3, lr}
   b48d2:	4b02      	ldr	r3, [pc, #8]	; (b48dc <network_listen+0xc>)
   b48d4:	681b      	ldr	r3, [r3, #0]
   b48d6:	69db      	ldr	r3, [r3, #28]
   b48d8:	9301      	str	r3, [sp, #4]
   b48da:	bd08      	pop	{r3, pc}
   b48dc:	00030240 	.word	0x00030240

000b48e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b48e0:	b508      	push	{r3, lr}
   b48e2:	4b02      	ldr	r3, [pc, #8]	; (b48ec <network_listening+0xc>)
   b48e4:	681b      	ldr	r3, [r3, #0]
   b48e6:	6a1b      	ldr	r3, [r3, #32]
   b48e8:	9301      	str	r3, [sp, #4]
   b48ea:	bd08      	pop	{r3, pc}
   b48ec:	00030240 	.word	0x00030240

000b48f0 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   b48f0:	b508      	push	{r3, lr}
   b48f2:	4b02      	ldr	r3, [pc, #8]	; (b48fc <network_set_credentials+0xc>)
   b48f4:	681b      	ldr	r3, [r3, #0]
   b48f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b48f8:	9301      	str	r3, [sp, #4]
   b48fa:	bd08      	pop	{r3, pc}
   b48fc:	00030240 	.word	0x00030240

000b4900 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4900:	b508      	push	{r3, lr}
   b4902:	4b02      	ldr	r3, [pc, #8]	; (b490c <network_set_listen_timeout+0xc>)
   b4904:	681b      	ldr	r3, [r3, #0]
   b4906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4908:	9301      	str	r3, [sp, #4]
   b490a:	bd08      	pop	{r3, pc}
   b490c:	00030240 	.word	0x00030240

000b4910 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4910:	b508      	push	{r3, lr}
   b4912:	4b02      	ldr	r3, [pc, #8]	; (b491c <network_get_listen_timeout+0xc>)
   b4914:	681b      	ldr	r3, [r3, #0]
   b4916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4918:	9301      	str	r3, [sp, #4]
   b491a:	bd08      	pop	{r3, pc}
   b491c:	00030240 	.word	0x00030240

000b4920 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4920:	b508      	push	{r3, lr}
   b4922:	4b02      	ldr	r3, [pc, #8]	; (b492c <network_is_on+0xc>)
   b4924:	681b      	ldr	r3, [r3, #0]
   b4926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4928:	9301      	str	r3, [sp, #4]
   b492a:	bd08      	pop	{r3, pc}
   b492c:	00030240 	.word	0x00030240

000b4930 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4930:	b508      	push	{r3, lr}
   b4932:	4b02      	ldr	r3, [pc, #8]	; (b493c <network_is_off+0xc>)
   b4934:	681b      	ldr	r3, [r3, #0]
   b4936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4938:	9301      	str	r3, [sp, #4]
   b493a:	bd08      	pop	{r3, pc}
   b493c:	00030240 	.word	0x00030240

000b4940 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4940:	b508      	push	{r3, lr}
   b4942:	4b02      	ldr	r3, [pc, #8]	; (b494c <spark_process+0xc>)
   b4944:	681b      	ldr	r3, [r3, #0]
   b4946:	689b      	ldr	r3, [r3, #8]
   b4948:	9301      	str	r3, [sp, #4]
   b494a:	bd08      	pop	{r3, pc}
   b494c:	00030244 	.word	0x00030244

000b4950 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4950:	b508      	push	{r3, lr}
   b4952:	4b02      	ldr	r3, [pc, #8]	; (b495c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4954:	681b      	ldr	r3, [r3, #0]
   b4956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4958:	9301      	str	r3, [sp, #4]
   b495a:	bd08      	pop	{r3, pc}
   b495c:	00030244 	.word	0x00030244

000b4960 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4960:	b508      	push	{r3, lr}
   b4962:	4b02      	ldr	r3, [pc, #8]	; (b496c <malloc+0xc>)
   b4964:	681b      	ldr	r3, [r3, #0]
   b4966:	681b      	ldr	r3, [r3, #0]
   b4968:	9301      	str	r3, [sp, #4]
   b496a:	bd08      	pop	{r3, pc}
   b496c:	0003021c 	.word	0x0003021c

000b4970 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4970:	b508      	push	{r3, lr}
   b4972:	4b02      	ldr	r3, [pc, #8]	; (b497c <free+0xc>)
   b4974:	681b      	ldr	r3, [r3, #0]
   b4976:	685b      	ldr	r3, [r3, #4]
   b4978:	9301      	str	r3, [sp, #4]
   b497a:	bd08      	pop	{r3, pc}
   b497c:	0003021c 	.word	0x0003021c

000b4980 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4980:	b508      	push	{r3, lr}
   b4982:	4b02      	ldr	r3, [pc, #8]	; (b498c <realloc+0xc>)
   b4984:	681b      	ldr	r3, [r3, #0]
   b4986:	689b      	ldr	r3, [r3, #8]
   b4988:	9301      	str	r3, [sp, #4]
   b498a:	bd08      	pop	{r3, pc}
   b498c:	0003021c 	.word	0x0003021c

000b4990 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4990:	b508      	push	{r3, lr}
   b4992:	4b02      	ldr	r3, [pc, #8]	; (b499c <vsnprintf+0xc>)
   b4994:	681b      	ldr	r3, [r3, #0]
   b4996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4998:	9301      	str	r3, [sp, #4]
   b499a:	bd08      	pop	{r3, pc}
   b499c:	0003021c 	.word	0x0003021c

000b49a0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b49a0:	b508      	push	{r3, lr}
   b49a2:	4b02      	ldr	r3, [pc, #8]	; (b49ac <__errno+0xc>)
   b49a4:	681b      	ldr	r3, [r3, #0]
   b49a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b49a8:	9301      	str	r3, [sp, #4]
   b49aa:	bd08      	pop	{r3, pc}
   b49ac:	0003021c 	.word	0x0003021c

000b49b0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b49b0:	b508      	push	{r3, lr}
   b49b2:	4b02      	ldr	r3, [pc, #8]	; (b49bc <__assert_func+0xc>)
   b49b4:	681b      	ldr	r3, [r3, #0]
   b49b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49b8:	9301      	str	r3, [sp, #4]
   b49ba:	bd08      	pop	{r3, pc}
   b49bc:	0003021c 	.word	0x0003021c

000b49c0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b49c0:	b508      	push	{r3, lr}
   b49c2:	4b02      	ldr	r3, [pc, #8]	; (b49cc <newlib_impure_ptr_callback+0xc>)
   b49c4:	681b      	ldr	r3, [r3, #0]
   b49c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49c8:	9301      	str	r3, [sp, #4]
   b49ca:	bd08      	pop	{r3, pc}
   b49cc:	0003021c 	.word	0x0003021c

000b49d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b49d0:	2200      	movs	r2, #0
   b49d2:	6840      	ldr	r0, [r0, #4]
   b49d4:	4611      	mov	r1, r2
   b49d6:	f7ff bf83 	b.w	b48e0 <network_listening>

000b49da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b49da:	2200      	movs	r2, #0
   b49dc:	6840      	ldr	r0, [r0, #4]
   b49de:	4611      	mov	r1, r2
   b49e0:	f7ff bf96 	b.w	b4910 <network_get_listen_timeout>

000b49e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b49e4:	6840      	ldr	r0, [r0, #4]
   b49e6:	2200      	movs	r2, #0
   b49e8:	f7ff bf8a 	b.w	b4900 <network_set_listen_timeout>

000b49ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b49ec:	6840      	ldr	r0, [r0, #4]
   b49ee:	2200      	movs	r2, #0
   b49f0:	f081 0101 	eor.w	r1, r1, #1
   b49f4:	f7ff bf6c 	b.w	b48d0 <network_listen>

000b49f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b49f8:	2300      	movs	r3, #0
   b49fa:	6840      	ldr	r0, [r0, #4]
   b49fc:	461a      	mov	r2, r3
   b49fe:	4619      	mov	r1, r3
   b4a00:	f7ff bf5e 	b.w	b48c0 <network_off>

000b4a04 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4a04:	2300      	movs	r3, #0
   b4a06:	6840      	ldr	r0, [r0, #4]
   b4a08:	461a      	mov	r2, r3
   b4a0a:	4619      	mov	r1, r3
   b4a0c:	f7ff bf50 	b.w	b48b0 <network_on>

000b4a10 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4a10:	2200      	movs	r2, #0
   b4a12:	6840      	ldr	r0, [r0, #4]
   b4a14:	4611      	mov	r1, r2
   b4a16:	f7ff bf43 	b.w	b48a0 <network_ready>

000b4a1a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4a1a:	2200      	movs	r2, #0
   b4a1c:	6840      	ldr	r0, [r0, #4]
   b4a1e:	4611      	mov	r1, r2
   b4a20:	f7ff bf2e 	b.w	b4880 <network_connecting>

000b4a24 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4a24:	6840      	ldr	r0, [r0, #4]
   b4a26:	2200      	movs	r2, #0
   b4a28:	2102      	movs	r1, #2
   b4a2a:	f7ff bf31 	b.w	b4890 <network_disconnect>

000b4a2e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4a2e:	2300      	movs	r3, #0
   b4a30:	6840      	ldr	r0, [r0, #4]
   b4a32:	461a      	mov	r2, r3
   b4a34:	f7ff bf1c 	b.w	b4870 <network_connect>

000b4a38 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4a38:	4b02      	ldr	r3, [pc, #8]	; (b4a44 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4a3a:	2203      	movs	r2, #3
   b4a3c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4a3e:	4a02      	ldr	r2, [pc, #8]	; (b4a48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4a40:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4a42:	4770      	bx	lr
   b4a44:	2003e6b8 	.word	0x2003e6b8
   b4a48:	000b6368 	.word	0x000b6368

000b4a4c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4a4c:	b510      	push	{r4, lr}
   b4a4e:	4604      	mov	r4, r0
   b4a50:	4608      	mov	r0, r1
{
    _spi = spi;
   b4a52:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4a54:	f7ff fe90 	bl	b4778 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4a58:	2300      	movs	r3, #0
   b4a5a:	6063      	str	r3, [r4, #4]
}
   b4a5c:	4620      	mov	r0, r4
   b4a5e:	bd10      	pop	{r4, pc}

000b4a60 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4a60:	4b05      	ldr	r3, [pc, #20]	; (b4a78 <_GLOBAL__sub_I_System+0x18>)
   b4a62:	2202      	movs	r2, #2
   b4a64:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4a66:	4b05      	ldr	r3, [pc, #20]	; (b4a7c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4a68:	4a05      	ldr	r2, [pc, #20]	; (b4a80 <_GLOBAL__sub_I_System+0x20>)
   b4a6a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4a6c:	2000      	movs	r0, #0
   b4a6e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4a72:	f7ff bed9 	b.w	b4828 <set_system_mode>
   b4a76:	bf00      	nop
   b4a78:	2003e6cc 	.word	0x2003e6cc
   b4a7c:	2003e6c0 	.word	0x2003e6c0
   b4a80:	ffff0000 	.word	0xffff0000

000b4a84 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4a84:	b510      	push	{r4, lr}
   b4a86:	4604      	mov	r4, r0
{
	free(buffer);
   b4a88:	6800      	ldr	r0, [r0, #0]
   b4a8a:	f7ff ff71 	bl	b4970 <free>
}
   b4a8e:	4620      	mov	r0, r4
   b4a90:	bd10      	pop	{r4, pc}

000b4a92 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4a92:	b510      	push	{r4, lr}
   b4a94:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4a96:	6800      	ldr	r0, [r0, #0]
   b4a98:	b108      	cbz	r0, b4a9e <_ZN6String10invalidateEv+0xc>
   b4a9a:	f7ff ff69 	bl	b4970 <free>
	buffer = NULL;
   b4a9e:	2300      	movs	r3, #0
	capacity = len = 0;
   b4aa0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4aa4:	6023      	str	r3, [r4, #0]
}
   b4aa6:	bd10      	pop	{r4, pc}

000b4aa8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4aa8:	b538      	push	{r3, r4, r5, lr}
   b4aaa:	4604      	mov	r4, r0
   b4aac:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4aae:	6800      	ldr	r0, [r0, #0]
   b4ab0:	3101      	adds	r1, #1
   b4ab2:	f7ff ff65 	bl	b4980 <realloc>
	if (newbuffer) {
   b4ab6:	b110      	cbz	r0, b4abe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4ab8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4abc:	2001      	movs	r0, #1
	}
	return 0;
}
   b4abe:	bd38      	pop	{r3, r4, r5, pc}

000b4ac0 <_ZN6String7reserveEj>:
{
   b4ac0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b4ac2:	6803      	ldr	r3, [r0, #0]
{
   b4ac4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4ac6:	b123      	cbz	r3, b4ad2 <_ZN6String7reserveEj+0x12>
   b4ac8:	6843      	ldr	r3, [r0, #4]
   b4aca:	428b      	cmp	r3, r1
   b4acc:	d301      	bcc.n	b4ad2 <_ZN6String7reserveEj+0x12>
   b4ace:	2001      	movs	r0, #1
}
   b4ad0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b4ad2:	4620      	mov	r0, r4
   b4ad4:	f7ff ffe8 	bl	b4aa8 <_ZN6String12changeBufferEj>
   b4ad8:	2800      	cmp	r0, #0
   b4ada:	d0f9      	beq.n	b4ad0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4adc:	68a3      	ldr	r3, [r4, #8]
   b4ade:	2b00      	cmp	r3, #0
   b4ae0:	d1f5      	bne.n	b4ace <_ZN6String7reserveEj+0xe>
   b4ae2:	6822      	ldr	r2, [r4, #0]
   b4ae4:	7013      	strb	r3, [r2, #0]
   b4ae6:	e7f2      	b.n	b4ace <_ZN6String7reserveEj+0xe>

000b4ae8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4aea:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4aec:	4611      	mov	r1, r2
   b4aee:	9201      	str	r2, [sp, #4]
{
   b4af0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b4af2:	f7ff ffe5 	bl	b4ac0 <_ZN6String7reserveEj>
   b4af6:	9a01      	ldr	r2, [sp, #4]
   b4af8:	b928      	cbnz	r0, b4b06 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4afa:	4620      	mov	r0, r4
   b4afc:	f7ff ffc9 	bl	b4a92 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4b00:	4620      	mov	r0, r4
   b4b02:	b003      	add	sp, #12
   b4b04:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4b06:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4b08:	4629      	mov	r1, r5
   b4b0a:	6820      	ldr	r0, [r4, #0]
   b4b0c:	f001 f91c 	bl	b5d48 <memcpy>
	buffer[len] = 0;
   b4b10:	6822      	ldr	r2, [r4, #0]
   b4b12:	68a3      	ldr	r3, [r4, #8]
   b4b14:	2100      	movs	r1, #0
   b4b16:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4b18:	e7f2      	b.n	b4b00 <_ZN6String4copyEPKcj+0x18>

000b4b1a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4b1a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4b1c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b4b1e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4b22:	4604      	mov	r4, r0
	len = 0;
   b4b24:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4b26:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4b28:	b141      	cbz	r1, b4b3c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4b2a:	4608      	mov	r0, r1
   b4b2c:	9101      	str	r1, [sp, #4]
   b4b2e:	f001 f961 	bl	b5df4 <strlen>
   b4b32:	9901      	ldr	r1, [sp, #4]
   b4b34:	4602      	mov	r2, r0
   b4b36:	4620      	mov	r0, r4
   b4b38:	f7ff ffd6 	bl	b4ae8 <_ZN6String4copyEPKcj>
}
   b4b3c:	4620      	mov	r0, r4
   b4b3e:	b002      	add	sp, #8
   b4b40:	bd10      	pop	{r4, pc}

000b4b42 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b4b42:	b570      	push	{r4, r5, r6, lr}
   b4b44:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b4b46:	460e      	mov	r6, r1
   b4b48:	b909      	cbnz	r1, b4b4e <_ZN6String6concatEPKcj+0xc>
   b4b4a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b4b4c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b4b4e:	b16a      	cbz	r2, b4b6c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b4b50:	6884      	ldr	r4, [r0, #8]
   b4b52:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b4b54:	4621      	mov	r1, r4
   b4b56:	f7ff ffb3 	bl	b4ac0 <_ZN6String7reserveEj>
   b4b5a:	2800      	cmp	r0, #0
   b4b5c:	d0f5      	beq.n	b4b4a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b4b5e:	6828      	ldr	r0, [r5, #0]
   b4b60:	68ab      	ldr	r3, [r5, #8]
   b4b62:	4631      	mov	r1, r6
   b4b64:	4418      	add	r0, r3
   b4b66:	f001 f93d 	bl	b5de4 <strcpy>
	len = newlen;
   b4b6a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b4b6c:	2001      	movs	r0, #1
   b4b6e:	e7ed      	b.n	b4b4c <_ZN6String6concatEPKcj+0xa>

000b4b70 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b4b70:	b513      	push	{r0, r1, r4, lr}
   b4b72:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b4b74:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b4b76:	b151      	cbz	r1, b4b8e <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b4b78:	9101      	str	r1, [sp, #4]
   b4b7a:	f001 f93b 	bl	b5df4 <strlen>
   b4b7e:	9901      	ldr	r1, [sp, #4]
   b4b80:	4602      	mov	r2, r0
   b4b82:	4620      	mov	r0, r4
}
   b4b84:	b002      	add	sp, #8
   b4b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b4b8a:	f7ff bfda 	b.w	b4b42 <_ZN6String6concatEPKcj>
}
   b4b8e:	b002      	add	sp, #8
   b4b90:	bd10      	pop	{r4, pc}
	...

000b4b94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4b94:	4802      	ldr	r0, [pc, #8]	; (b4ba0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4b96:	2300      	movs	r3, #0
   b4b98:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4b9a:	f7ff bd25 	b.w	b45e8 <os_mutex_recursive_create>
   b4b9e:	bf00      	nop
   b4ba0:	2003e6d0 	.word	0x2003e6d0

000b4ba4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4ba6:	4606      	mov	r6, r0
   b4ba8:	460d      	mov	r5, r1
  size_t n = 0;
   b4baa:	188f      	adds	r7, r1, r2
   b4bac:	2400      	movs	r4, #0
  while (size--) {
   b4bae:	42bd      	cmp	r5, r7
   b4bb0:	d00c      	beq.n	b4bcc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4bb2:	6833      	ldr	r3, [r6, #0]
   b4bb4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4bb8:	689b      	ldr	r3, [r3, #8]
   b4bba:	4630      	mov	r0, r6
   b4bbc:	4798      	blx	r3
     if (chunk>=0)
   b4bbe:	1e03      	subs	r3, r0, #0
   b4bc0:	db01      	blt.n	b4bc6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4bc2:	441c      	add	r4, r3
  while (size--) {
   b4bc4:	e7f3      	b.n	b4bae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4bc6:	2c00      	cmp	r4, #0
   b4bc8:	bf08      	it	eq
   b4bca:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4bcc:	4620      	mov	r0, r4
   b4bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4bd0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4bd0:	b513      	push	{r0, r1, r4, lr}
   b4bd2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4bd4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4bd6:	b159      	cbz	r1, b4bf0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4bd8:	9101      	str	r1, [sp, #4]
   b4bda:	f001 f90b 	bl	b5df4 <strlen>
   b4bde:	6823      	ldr	r3, [r4, #0]
   b4be0:	9901      	ldr	r1, [sp, #4]
   b4be2:	68db      	ldr	r3, [r3, #12]
   b4be4:	4602      	mov	r2, r0
   b4be6:	4620      	mov	r0, r4
    }
   b4be8:	b002      	add	sp, #8
   b4bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4bee:	4718      	bx	r3
    }
   b4bf0:	b002      	add	sp, #8
   b4bf2:	bd10      	pop	{r4, pc}

000b4bf4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b4bf4:	b508      	push	{r3, lr}
  return write(str);
   b4bf6:	f7ff ffeb 	bl	b4bd0 <_ZN5Print5writeEPKc>
}
   b4bfa:	bd08      	pop	{r3, pc}

000b4bfc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b4bfc:	6803      	ldr	r3, [r0, #0]
   b4bfe:	689b      	ldr	r3, [r3, #8]
   b4c00:	4718      	bx	r3

000b4c02 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4c02:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4c04:	210d      	movs	r1, #13
{
   b4c06:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4c08:	f7ff fff8 	bl	b4bfc <_ZN5Print5printEc>
  n += print('\n');
   b4c0c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4c0e:	4604      	mov	r4, r0
  n += print('\n');
   b4c10:	4628      	mov	r0, r5
   b4c12:	f7ff fff3 	bl	b4bfc <_ZN5Print5printEc>
  return n;
}
   b4c16:	4420      	add	r0, r4
   b4c18:	bd38      	pop	{r3, r4, r5, pc}

000b4c1a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b4c1a:	b538      	push	{r3, r4, r5, lr}
   b4c1c:	4605      	mov	r5, r0
  return write(str);
   b4c1e:	f7ff ffd7 	bl	b4bd0 <_ZN5Print5writeEPKc>
   b4c22:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b4c24:	4628      	mov	r0, r5
   b4c26:	f7ff ffec 	bl	b4c02 <_ZN5Print7printlnEv>
  return n;
}
   b4c2a:	4420      	add	r0, r4
   b4c2c:	bd38      	pop	{r3, r4, r5, pc}

000b4c2e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4c2e:	b530      	push	{r4, r5, lr}
   b4c30:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4c32:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4c34:	2a01      	cmp	r2, #1
  *str = '\0';
   b4c36:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4c3a:	bf98      	it	ls
   b4c3c:	220a      	movls	r2, #10
   b4c3e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4c40:	460d      	mov	r5, r1
   b4c42:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4c46:	fb01 5312 	mls	r3, r1, r2, r5
   b4c4a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c4e:	2b09      	cmp	r3, #9
   b4c50:	bf94      	ite	ls
   b4c52:	3330      	addls	r3, #48	; 0x30
   b4c54:	3337      	addhi	r3, #55	; 0x37
   b4c56:	b2db      	uxtb	r3, r3
  } while(n);
   b4c58:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c5a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4c5e:	d9ef      	bls.n	b4c40 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4c60:	4621      	mov	r1, r4
   b4c62:	f7ff ffb5 	bl	b4bd0 <_ZN5Print5writeEPKc>
}
   b4c66:	b00b      	add	sp, #44	; 0x2c
   b4c68:	bd30      	pop	{r4, r5, pc}

000b4c6a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4c6e:	b086      	sub	sp, #24
   b4c70:	af00      	add	r7, sp, #0
   b4c72:	4605      	mov	r5, r0
   b4c74:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b4c76:	1d38      	adds	r0, r7, #4
   b4c78:	2114      	movs	r1, #20
{
   b4c7a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b4c7c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b4c7e:	f7ff fe87 	bl	b4990 <vsnprintf>

    if (n<bufsize)
   b4c82:	2813      	cmp	r0, #19
   b4c84:	d80e      	bhi.n	b4ca4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b4c86:	1d39      	adds	r1, r7, #4
   b4c88:	4628      	mov	r0, r5
   b4c8a:	f7ff ffa1 	bl	b4bd0 <_ZN5Print5writeEPKc>
   b4c8e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b4c90:	b11e      	cbz	r6, b4c9a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b4c92:	4628      	mov	r0, r5
   b4c94:	f7ff ffb5 	bl	b4c02 <_ZN5Print7printlnEv>
   b4c98:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b4c9a:	4620      	mov	r0, r4
   b4c9c:	3718      	adds	r7, #24
   b4c9e:	46bd      	mov	sp, r7
   b4ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b4ca4:	f100 0308 	add.w	r3, r0, #8
   b4ca8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b4cac:	46e8      	mov	r8, sp
        char bigger[n+1];
   b4cae:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b4cb2:	4622      	mov	r2, r4
   b4cb4:	1c41      	adds	r1, r0, #1
   b4cb6:	683b      	ldr	r3, [r7, #0]
   b4cb8:	4668      	mov	r0, sp
   b4cba:	f7ff fe69 	bl	b4990 <vsnprintf>
  return write(str);
   b4cbe:	4669      	mov	r1, sp
   b4cc0:	4628      	mov	r0, r5
   b4cc2:	f7ff ff85 	bl	b4bd0 <_ZN5Print5writeEPKc>
   b4cc6:	4604      	mov	r4, r0
   b4cc8:	46c5      	mov	sp, r8
   b4cca:	e7e1      	b.n	b4c90 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b4ccc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4ccc:	4b01      	ldr	r3, [pc, #4]	; (b4cd4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4cce:	4a02      	ldr	r2, [pc, #8]	; (b4cd8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4cd0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4cd2:	4770      	bx	lr
   b4cd4:	2003e6d4 	.word	0x2003e6d4
   b4cd8:	000b63a4 	.word	0x000b63a4

000b4cdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4cdc:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4cde:	681a      	ldr	r2, [r3, #0]
   b4ce0:	4b02      	ldr	r3, [pc, #8]	; (b4cec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4ce2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4ce4:	4770      	bx	lr
   b4ce6:	bf00      	nop
   b4ce8:	2003e5bc 	.word	0x2003e5bc
   b4cec:	2003e6d8 	.word	0x2003e6d8

000b4cf0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4cf0:	2100      	movs	r1, #0
   b4cf2:	f7ff bda1 	b.w	b4838 <system_delay_ms>
	...

000b4cf8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4cf8:	4b01      	ldr	r3, [pc, #4]	; (b4d00 <_GLOBAL__sub_I_RGB+0x8>)
   b4cfa:	2200      	movs	r2, #0
   b4cfc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4cfe:	4770      	bx	lr
   b4d00:	2003e6dc 	.word	0x2003e6dc

000b4d04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4d04:	4b01      	ldr	r3, [pc, #4]	; (b4d0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4d06:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4d08:	4770      	bx	lr
   b4d0a:	bf00      	nop
   b4d0c:	2003e5c0 	.word	0x2003e5c0

000b4d10 <serialEventRun>:
{
   b4d10:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4d12:	4b0b      	ldr	r3, [pc, #44]	; (b4d40 <serialEventRun+0x30>)
   b4d14:	b143      	cbz	r3, b4d28 <serialEventRun+0x18>
   b4d16:	f000 f981 	bl	b501c <_Z16_fetch_usbserialv>
   b4d1a:	6803      	ldr	r3, [r0, #0]
   b4d1c:	691b      	ldr	r3, [r3, #16]
   b4d1e:	4798      	blx	r3
   b4d20:	2800      	cmp	r0, #0
   b4d22:	dd01      	ble.n	b4d28 <serialEventRun+0x18>
        serialEvent();
   b4d24:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4d28:	4b06      	ldr	r3, [pc, #24]	; (b4d44 <serialEventRun+0x34>)
   b4d2a:	b143      	cbz	r3, b4d3e <serialEventRun+0x2e>
   b4d2c:	f000 fe8e 	bl	b5a4c <_Z22__fetch_global_Serial1v>
   b4d30:	6803      	ldr	r3, [r0, #0]
   b4d32:	691b      	ldr	r3, [r3, #16]
   b4d34:	4798      	blx	r3
   b4d36:	2800      	cmp	r0, #0
   b4d38:	dd01      	ble.n	b4d3e <serialEventRun+0x2e>
        serialEvent1();
   b4d3a:	f3af 8000 	nop.w
}
   b4d3e:	bd08      	pop	{r3, pc}
	...

000b4d48 <_post_loop>:
{
   b4d48:	b508      	push	{r3, lr}
	serialEventRun();
   b4d4a:	f7ff ffe1 	bl	b4d10 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4d4e:	f7ff fc3b 	bl	b45c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4d52:	4b01      	ldr	r3, [pc, #4]	; (b4d58 <_post_loop+0x10>)
   b4d54:	6018      	str	r0, [r3, #0]
}
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	2003e740 	.word	0x2003e740

000b4d5c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4d5c:	4805      	ldr	r0, [pc, #20]	; (b4d74 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4d5e:	4a06      	ldr	r2, [pc, #24]	; (b4d78 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4d60:	4906      	ldr	r1, [pc, #24]	; (b4d7c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4d62:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4d64:	1a12      	subs	r2, r2, r0
   b4d66:	f000 ffef 	bl	b5d48 <memcpy>
    __backup_sram_signature = signature;
   b4d6a:	4b05      	ldr	r3, [pc, #20]	; (b4d80 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4d6c:	4a05      	ldr	r2, [pc, #20]	; (b4d84 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4d6e:	601a      	str	r2, [r3, #0]
}
   b4d70:	bd08      	pop	{r3, pc}
   b4d72:	bf00      	nop
   b4d74:	2003f400 	.word	0x2003f400
   b4d78:	2003f404 	.word	0x2003f404
   b4d7c:	000b6734 	.word	0x000b6734
   b4d80:	2003f400 	.word	0x2003f400
   b4d84:	9a271c1e 	.word	0x9a271c1e

000b4d88 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4d88:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4d8a:	2300      	movs	r3, #0
   b4d8c:	9300      	str	r3, [sp, #0]
   b4d8e:	461a      	mov	r2, r3
   b4d90:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4d94:	f7ff fd62 	bl	b485c <system_ctrl_set_result>
}
   b4d98:	b003      	add	sp, #12
   b4d9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4da0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4da0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4da2:	8843      	ldrh	r3, [r0, #2]
   b4da4:	2b0a      	cmp	r3, #10
   b4da6:	d008      	beq.n	b4dba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4da8:	2b50      	cmp	r3, #80	; 0x50
   b4daa:	d10b      	bne.n	b4dc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4dac:	4b09      	ldr	r3, [pc, #36]	; (b4dd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4dae:	681b      	ldr	r3, [r3, #0]
   b4db0:	b14b      	cbz	r3, b4dc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4db2:	b003      	add	sp, #12
   b4db4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4db8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4dba:	f7ff ffe5 	bl	b4d88 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4dbe:	b003      	add	sp, #12
   b4dc0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4dc4:	2300      	movs	r3, #0
   b4dc6:	9300      	str	r3, [sp, #0]
   b4dc8:	461a      	mov	r2, r3
   b4dca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4dce:	f7ff fd45 	bl	b485c <system_ctrl_set_result>
}
   b4dd2:	e7f4      	b.n	b4dbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4dd4:	2003e6f0 	.word	0x2003e6f0

000b4dd8 <module_user_init_hook>:
{
   b4dd8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4dda:	4812      	ldr	r0, [pc, #72]	; (b4e24 <module_user_init_hook+0x4c>)
   b4ddc:	2100      	movs	r1, #0
   b4dde:	f7ff fdef 	bl	b49c0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4de2:	4b11      	ldr	r3, [pc, #68]	; (b4e28 <module_user_init_hook+0x50>)
   b4de4:	681a      	ldr	r2, [r3, #0]
   b4de6:	4b11      	ldr	r3, [pc, #68]	; (b4e2c <module_user_init_hook+0x54>)
   b4de8:	429a      	cmp	r2, r3
   b4dea:	4b11      	ldr	r3, [pc, #68]	; (b4e30 <module_user_init_hook+0x58>)
   b4dec:	bf0c      	ite	eq
   b4dee:	2201      	moveq	r2, #1
   b4df0:	2200      	movne	r2, #0
   b4df2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4df4:	d001      	beq.n	b4dfa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4df6:	f7ff ffb1 	bl	b4d5c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4dfa:	f7ff fbdd 	bl	b45b8 <HAL_RNG_GetRandomNumber>
   b4dfe:	4604      	mov	r4, r0
    srand(seed);
   b4e00:	f000 ffb8 	bl	b5d74 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4e04:	4b0b      	ldr	r3, [pc, #44]	; (b4e34 <module_user_init_hook+0x5c>)
   b4e06:	b113      	cbz	r3, b4e0e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4e08:	4620      	mov	r0, r4
   b4e0a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4e0e:	2100      	movs	r1, #0
   b4e10:	4808      	ldr	r0, [pc, #32]	; (b4e34 <module_user_init_hook+0x5c>)
   b4e12:	f7ff fd9d 	bl	b4950 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4e1a:	4807      	ldr	r0, [pc, #28]	; (b4e38 <module_user_init_hook+0x60>)
   b4e1c:	2100      	movs	r1, #0
   b4e1e:	f7ff bd13 	b.w	b4848 <system_ctrl_set_app_request_handler>
   b4e22:	bf00      	nop
   b4e24:	000b4d05 	.word	0x000b4d05
   b4e28:	2003f400 	.word	0x2003f400
   b4e2c:	9a271c1e 	.word	0x9a271c1e
   b4e30:	2003e6ec 	.word	0x2003e6ec
   b4e34:	00000000 	.word	0x00000000
   b4e38:	000b4da1 	.word	0x000b4da1

000b4e3c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4e3c:	4770      	bx	lr

000b4e3e <_ZN9IPAddressD0Ev>:
   b4e3e:	b510      	push	{r4, lr}
   b4e40:	2118      	movs	r1, #24
   b4e42:	4604      	mov	r4, r0
   b4e44:	f7ff f929 	bl	b409a <_ZdlPvj>
   b4e48:	4620      	mov	r0, r4
   b4e4a:	bd10      	pop	{r4, pc}

000b4e4c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4e4e:	7d03      	ldrb	r3, [r0, #20]
   b4e50:	2b06      	cmp	r3, #6
{
   b4e52:	b08d      	sub	sp, #52	; 0x34
   b4e54:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e56:	f100 0704 	add.w	r7, r0, #4
   b4e5a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4e5e:	d012      	beq.n	b4e86 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4e60:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4e64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4e68:	220a      	movs	r2, #10
   b4e6a:	4630      	mov	r0, r6
   b4e6c:	f7ff fedf 	bl	b4c2e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4e70:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4e72:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4e74:	d019      	beq.n	b4eaa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4e76:	2c00      	cmp	r4, #0
   b4e78:	d0f4      	beq.n	b4e64 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4e7a:	212e      	movs	r1, #46	; 0x2e
   b4e7c:	4630      	mov	r0, r6
   b4e7e:	f7ff febd 	bl	b4bfc <_ZN5Print5printEc>
   b4e82:	4404      	add	r4, r0
   b4e84:	e7ee      	b.n	b4e64 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e86:	232f      	movs	r3, #47	; 0x2f
   b4e88:	466a      	mov	r2, sp
   b4e8a:	4639      	mov	r1, r7
   b4e8c:	200a      	movs	r0, #10
		buf[0] = 0;
   b4e8e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e92:	f7ff fbb1 	bl	b45f8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4e96:	4668      	mov	r0, sp
   b4e98:	f000 ffac 	bl	b5df4 <strlen>
   b4e9c:	6833      	ldr	r3, [r6, #0]
   b4e9e:	4602      	mov	r2, r0
   b4ea0:	68db      	ldr	r3, [r3, #12]
   b4ea2:	4669      	mov	r1, sp
   b4ea4:	4630      	mov	r0, r6
   b4ea6:	4798      	blx	r3
   b4ea8:	4604      	mov	r4, r0
    }
    return n;
}
   b4eaa:	4620      	mov	r0, r4
   b4eac:	b00d      	add	sp, #52	; 0x34
   b4eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4eb0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4eb0:	b510      	push	{r4, lr}
   b4eb2:	4b05      	ldr	r3, [pc, #20]	; (b4ec8 <_ZN9IPAddressC1Ev+0x18>)
   b4eb4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4eb6:	2211      	movs	r2, #17
   b4eb8:	f840 3b04 	str.w	r3, [r0], #4
   b4ebc:	2100      	movs	r1, #0
   b4ebe:	f000 ff51 	bl	b5d64 <memset>
}
   b4ec2:	4620      	mov	r0, r4
   b4ec4:	bd10      	pop	{r4, pc}
   b4ec6:	bf00      	nop
   b4ec8:	000b63cc 	.word	0x000b63cc

000b4ecc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4ecc:	4603      	mov	r3, r0
   b4ece:	4a07      	ldr	r2, [pc, #28]	; (b4eec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4ed0:	b510      	push	{r4, lr}
   b4ed2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4ed6:	f101 0210 	add.w	r2, r1, #16
   b4eda:	f851 4b04 	ldr.w	r4, [r1], #4
   b4ede:	f843 4b04 	str.w	r4, [r3], #4
   b4ee2:	4291      	cmp	r1, r2
   b4ee4:	d1f9      	bne.n	b4eda <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4ee6:	780a      	ldrb	r2, [r1, #0]
   b4ee8:	701a      	strb	r2, [r3, #0]
}
   b4eea:	bd10      	pop	{r4, pc}
   b4eec:	000b63cc 	.word	0x000b63cc

000b4ef0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b4ef0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b4ef2:	2b04      	cmp	r3, #4
   b4ef4:	d104      	bne.n	b4f00 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b4ef6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4ef8:	3800      	subs	r0, #0
   b4efa:	bf18      	it	ne
   b4efc:	2001      	movne	r0, #1
   b4efe:	4770      	bx	lr
    } else if (version() == 6) {
   b4f00:	2b06      	cmp	r3, #6
   b4f02:	d107      	bne.n	b4f14 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4f04:	6843      	ldr	r3, [r0, #4]
   b4f06:	b93b      	cbnz	r3, b4f18 <_ZNK9IPAddresscvbEv+0x28>
   b4f08:	6883      	ldr	r3, [r0, #8]
   b4f0a:	b92b      	cbnz	r3, b4f18 <_ZNK9IPAddresscvbEv+0x28>
   b4f0c:	68c3      	ldr	r3, [r0, #12]
   b4f0e:	b91b      	cbnz	r3, b4f18 <_ZNK9IPAddresscvbEv+0x28>
   b4f10:	6900      	ldr	r0, [r0, #16]
   b4f12:	e7f1      	b.n	b4ef8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b4f14:	2000      	movs	r0, #0
   b4f16:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4f18:	2001      	movs	r0, #1
}
   b4f1a:	4770      	bx	lr

000b4f1c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4f1c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4f1e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4f22:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4f26:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4f2a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4f2e:	2304      	movs	r3, #4
   b4f30:	6041      	str	r1, [r0, #4]
   b4f32:	7503      	strb	r3, [r0, #20]
}
   b4f34:	bd10      	pop	{r4, pc}
	...

000b4f38 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4f38:	b507      	push	{r0, r1, r2, lr}
   b4f3a:	4b06      	ldr	r3, [pc, #24]	; (b4f54 <_ZN9IPAddressC1EPKh+0x1c>)
   b4f3c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4f3e:	78cb      	ldrb	r3, [r1, #3]
   b4f40:	9300      	str	r3, [sp, #0]
   b4f42:	788b      	ldrb	r3, [r1, #2]
   b4f44:	784a      	ldrb	r2, [r1, #1]
   b4f46:	7809      	ldrb	r1, [r1, #0]
   b4f48:	f7ff ffe8 	bl	b4f1c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4f4c:	b003      	add	sp, #12
   b4f4e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4f52:	bf00      	nop
   b4f54:	000b63cc 	.word	0x000b63cc

000b4f58 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4f58:	7441      	strb	r1, [r0, #17]
}
   b4f5a:	4770      	bx	lr

000b4f5c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f5c:	4770      	bx	lr

000b4f5e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4f5e:	4770      	bx	lr

000b4f60 <_ZN9USBSerial4readEv>:
{
   b4f60:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4f62:	2100      	movs	r1, #0
   b4f64:	7c00      	ldrb	r0, [r0, #16]
   b4f66:	f7ff fc37 	bl	b47d8 <HAL_USB_USART_Receive_Data>
}
   b4f6a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f6e:	bd08      	pop	{r3, pc}

000b4f70 <_ZN9USBSerial4peekEv>:
{
   b4f70:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4f72:	2101      	movs	r1, #1
   b4f74:	7c00      	ldrb	r0, [r0, #16]
   b4f76:	f7ff fc2f 	bl	b47d8 <HAL_USB_USART_Receive_Data>
}
   b4f7a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f7e:	bd08      	pop	{r3, pc}

000b4f80 <_ZN9USBSerial17availableForWriteEv>:
{
   b4f80:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4f82:	7c00      	ldrb	r0, [r0, #16]
   b4f84:	f7ff fc20 	bl	b47c8 <HAL_USB_USART_Available_Data_For_Write>
}
   b4f88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f8c:	bd08      	pop	{r3, pc}

000b4f8e <_ZN9USBSerial9availableEv>:
{
   b4f8e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4f90:	7c00      	ldrb	r0, [r0, #16]
   b4f92:	f7ff fc11 	bl	b47b8 <HAL_USB_USART_Available_Data>
}
   b4f96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f9a:	bd08      	pop	{r3, pc}

000b4f9c <_ZN9USBSerial5writeEh>:
{
   b4f9c:	b513      	push	{r0, r1, r4, lr}
   b4f9e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4fa0:	7c00      	ldrb	r0, [r0, #16]
{
   b4fa2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4fa4:	f7ff fc10 	bl	b47c8 <HAL_USB_USART_Available_Data_For_Write>
   b4fa8:	2800      	cmp	r0, #0
   b4faa:	9901      	ldr	r1, [sp, #4]
   b4fac:	dc01      	bgt.n	b4fb2 <_ZN9USBSerial5writeEh+0x16>
   b4fae:	7c60      	ldrb	r0, [r4, #17]
   b4fb0:	b120      	cbz	r0, b4fbc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4fb2:	7c20      	ldrb	r0, [r4, #16]
   b4fb4:	f7ff fc18 	bl	b47e8 <HAL_USB_USART_Send_Data>
   b4fb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4fbc:	b002      	add	sp, #8
   b4fbe:	bd10      	pop	{r4, pc}

000b4fc0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4fc0:	7c00      	ldrb	r0, [r0, #16]
   b4fc2:	f7ff bc19 	b.w	b47f8 <HAL_USB_USART_Flush_Data>

000b4fc6 <_ZN9USBSerialD0Ev>:
   b4fc6:	b510      	push	{r4, lr}
   b4fc8:	2114      	movs	r1, #20
   b4fca:	4604      	mov	r4, r0
   b4fcc:	f7ff f865 	bl	b409a <_ZdlPvj>
   b4fd0:	4620      	mov	r0, r4
   b4fd2:	bd10      	pop	{r4, pc}

000b4fd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4fd4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4fda:	4604      	mov	r4, r0
   b4fdc:	4608      	mov	r0, r1
   b4fde:	2100      	movs	r1, #0
   b4fe0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4fe4:	4b04      	ldr	r3, [pc, #16]	; (b4ff8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4fe6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4fe8:	2301      	movs	r3, #1
  _serial = serial;
   b4fea:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4fec:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4fee:	4611      	mov	r1, r2
   b4ff0:	f7ff fbd2 	bl	b4798 <HAL_USB_USART_Init>
}
   b4ff4:	4620      	mov	r0, r4
   b4ff6:	bd10      	pop	{r4, pc}
   b4ff8:	000b63e0 	.word	0x000b63e0

000b4ffc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4ffc:	7c00      	ldrb	r0, [r0, #16]
   b4ffe:	2200      	movs	r2, #0
   b5000:	f7ff bbd2 	b.w	b47a8 <HAL_USB_USART_Begin>

000b5004 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b5004:	7c00      	ldrb	r0, [r0, #16]
   b5006:	f7ff bbff 	b.w	b4808 <HAL_USB_USART_Is_Connected>

000b500a <_Z19acquireSerialBufferv>:
{
   b500a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b500c:	2214      	movs	r2, #20
{
   b500e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5010:	2100      	movs	r1, #0
   b5012:	f000 fea7 	bl	b5d64 <memset>
}
   b5016:	4620      	mov	r0, r4
   b5018:	bd10      	pop	{r4, pc}
	...

000b501c <_Z16_fetch_usbserialv>:
{
   b501c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b501e:	4c0f      	ldr	r4, [pc, #60]	; (b505c <_Z16_fetch_usbserialv+0x40>)
{
   b5020:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5022:	a803      	add	r0, sp, #12
   b5024:	f7ff fff1 	bl	b500a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5028:	7821      	ldrb	r1, [r4, #0]
   b502a:	f3bf 8f5b 	dmb	ish
   b502e:	f011 0101 	ands.w	r1, r1, #1
   b5032:	d10f      	bne.n	b5054 <_Z16_fetch_usbserialv+0x38>
   b5034:	4620      	mov	r0, r4
   b5036:	9101      	str	r1, [sp, #4]
   b5038:	f7ff f831 	bl	b409e <__cxa_guard_acquire>
   b503c:	9901      	ldr	r1, [sp, #4]
   b503e:	b148      	cbz	r0, b5054 <_Z16_fetch_usbserialv+0x38>
   b5040:	aa03      	add	r2, sp, #12
   b5042:	4807      	ldr	r0, [pc, #28]	; (b5060 <_Z16_fetch_usbserialv+0x44>)
   b5044:	f7ff ffc6 	bl	b4fd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5048:	4620      	mov	r0, r4
   b504a:	f7ff f82d 	bl	b40a8 <__cxa_guard_release>
   b504e:	4805      	ldr	r0, [pc, #20]	; (b5064 <_Z16_fetch_usbserialv+0x48>)
   b5050:	f000 fe74 	bl	b5d3c <atexit>
	return _usbserial;
}
   b5054:	4802      	ldr	r0, [pc, #8]	; (b5060 <_Z16_fetch_usbserialv+0x44>)
   b5056:	b008      	add	sp, #32
   b5058:	bd10      	pop	{r4, pc}
   b505a:	bf00      	nop
   b505c:	2003e6f4 	.word	0x2003e6f4
   b5060:	2003e6f8 	.word	0x2003e6f8
   b5064:	000b4f5d 	.word	0x000b4f5d

000b5068 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5068:	4770      	bx	lr

000b506a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b506a:	7441      	strb	r1, [r0, #17]
}
   b506c:	4770      	bx	lr

000b506e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b506e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5070:	7c00      	ldrb	r0, [r0, #16]
   b5072:	f7ff fb09 	bl	b4688 <hal_usart_available_data_for_write>
}
   b5076:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b507a:	bd08      	pop	{r3, pc}

000b507c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b507c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b507e:	7c00      	ldrb	r0, [r0, #16]
   b5080:	f7ff fada 	bl	b4638 <hal_usart_available>
}
   b5084:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5088:	bd08      	pop	{r3, pc}

000b508a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b508a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b508c:	7c00      	ldrb	r0, [r0, #16]
   b508e:	f7ff fae3 	bl	b4658 <hal_usart_peek>
}
   b5092:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5096:	bd08      	pop	{r3, pc}

000b5098 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5098:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b509a:	7c00      	ldrb	r0, [r0, #16]
   b509c:	f7ff fad4 	bl	b4648 <hal_usart_read>
}
   b50a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b50a4:	bd08      	pop	{r3, pc}

000b50a6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b50a6:	7c00      	ldrb	r0, [r0, #16]
   b50a8:	f7ff bade 	b.w	b4668 <hal_usart_flush>

000b50ac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b50ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b50ae:	7c45      	ldrb	r5, [r0, #17]
{
   b50b0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b50b2:	b12d      	cbz	r5, b50c0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b50b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b50b6:	b003      	add	sp, #12
   b50b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b50bc:	f7ff bab4 	b.w	b4628 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b50c0:	7c00      	ldrb	r0, [r0, #16]
   b50c2:	9101      	str	r1, [sp, #4]
   b50c4:	f7ff fae0 	bl	b4688 <hal_usart_available_data_for_write>
   b50c8:	2800      	cmp	r0, #0
   b50ca:	9901      	ldr	r1, [sp, #4]
   b50cc:	dcf2      	bgt.n	b50b4 <_ZN11USARTSerial5writeEh+0x8>
}
   b50ce:	4628      	mov	r0, r5
   b50d0:	b003      	add	sp, #12
   b50d2:	bd30      	pop	{r4, r5, pc}

000b50d4 <_ZN11USARTSerialD0Ev>:
   b50d4:	b510      	push	{r4, lr}
   b50d6:	2114      	movs	r1, #20
   b50d8:	4604      	mov	r4, r0
   b50da:	f7fe ffde 	bl	b409a <_ZdlPvj>
   b50de:	4620      	mov	r0, r4
   b50e0:	bd10      	pop	{r4, pc}
	...

000b50e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b50e4:	b510      	push	{r4, lr}
   b50e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b50ea:	4604      	mov	r4, r0
   b50ec:	4608      	mov	r0, r1
   b50ee:	4611      	mov	r1, r2
   b50f0:	2200      	movs	r2, #0
   b50f2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b50f6:	4b04      	ldr	r3, [pc, #16]	; (b5108 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b50f8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b50fa:	2301      	movs	r3, #1
  _serial = serial;
   b50fc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b50fe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5100:	f7ff faca 	bl	b4698 <hal_usart_init_ex>
}
   b5104:	4620      	mov	r0, r4
   b5106:	bd10      	pop	{r4, pc}
   b5108:	000b6410 	.word	0x000b6410

000b510c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b510c:	4770      	bx	lr

000b510e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b510e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5110:	4606      	mov	r6, r0
   b5112:	4615      	mov	r5, r2
   b5114:	460c      	mov	r4, r1
   b5116:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5118:	42bc      	cmp	r4, r7
   b511a:	d006      	beq.n	b512a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b511c:	6833      	ldr	r3, [r6, #0]
   b511e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5122:	689b      	ldr	r3, [r3, #8]
   b5124:	4630      	mov	r0, r6
   b5126:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5128:	e7f6      	b.n	b5118 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b512a:	4628      	mov	r0, r5
   b512c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b512e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b512e:	7c00      	ldrb	r0, [r0, #16]
   b5130:	2200      	movs	r2, #0
   b5132:	f7ff bab9 	b.w	b46a8 <hal_i2c_write>

000b5136 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5136:	7c00      	ldrb	r0, [r0, #16]
   b5138:	2100      	movs	r1, #0
   b513a:	f7ff babd 	b.w	b46b8 <hal_i2c_available>

000b513e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b513e:	7c00      	ldrb	r0, [r0, #16]
   b5140:	2100      	movs	r1, #0
   b5142:	f7ff bac1 	b.w	b46c8 <hal_i2c_read>

000b5146 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5146:	7c00      	ldrb	r0, [r0, #16]
   b5148:	2100      	movs	r1, #0
   b514a:	f7ff bac5 	b.w	b46d8 <hal_i2c_peek>

000b514e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b514e:	7c00      	ldrb	r0, [r0, #16]
   b5150:	2100      	movs	r1, #0
   b5152:	f7ff bac9 	b.w	b46e8 <hal_i2c_flush>

000b5156 <_ZN7TwoWireD0Ev>:
   b5156:	b510      	push	{r4, lr}
   b5158:	2114      	movs	r1, #20
   b515a:	4604      	mov	r4, r0
   b515c:	f7fe ff9d 	bl	b409a <_ZdlPvj>
   b5160:	4620      	mov	r0, r4
   b5162:	bd10      	pop	{r4, pc}

000b5164 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5164:	b538      	push	{r3, r4, r5, lr}
   b5166:	4604      	mov	r4, r0
   b5168:	4615      	mov	r5, r2
   b516a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b516e:	2200      	movs	r2, #0
   b5170:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5174:	4b09      	ldr	r3, [pc, #36]	; (b519c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5176:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5178:	4608      	mov	r0, r1
   b517a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b517c:	4629      	mov	r1, r5
   b517e:	f7ff fac3 	bl	b4708 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5182:	30bf      	adds	r0, #191	; 0xbf
   b5184:	d108      	bne.n	b5198 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5186:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5188:	07db      	lsls	r3, r3, #31
   b518a:	d505      	bpl.n	b5198 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b518c:	6868      	ldr	r0, [r5, #4]
   b518e:	f7ff fbef 	bl	b4970 <free>
    free(conf.tx_buffer);
   b5192:	68e8      	ldr	r0, [r5, #12]
   b5194:	f7ff fbec 	bl	b4970 <free>
}
   b5198:	4620      	mov	r0, r4
   b519a:	bd38      	pop	{r3, r4, r5, pc}
   b519c:	000b6440 	.word	0x000b6440

000b51a0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b51a0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b51a2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b51a4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b51a8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b51aa:	2201      	movs	r2, #1
   b51ac:	f04f 33ff 	mov.w	r3, #4294967295
   b51b0:	f10d 0107 	add.w	r1, sp, #7
   b51b4:	47a0      	blx	r4
}
   b51b6:	b002      	add	sp, #8
   b51b8:	bd10      	pop	{r4, pc}

000b51ba <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b51ba:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b51bc:	6803      	ldr	r3, [r0, #0]
   b51be:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b51c0:	f04f 33ff 	mov.w	r3, #4294967295
   b51c4:	46a4      	mov	ip, r4
}
   b51c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b51ca:	4760      	bx	ip

000b51cc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b51cc:	b513      	push	{r0, r1, r4, lr}
   b51ce:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b51d0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b51d2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b51d6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b51d8:	f10d 0107 	add.w	r1, sp, #7
   b51dc:	2201      	movs	r2, #1
   b51de:	47a0      	blx	r4
}
   b51e0:	b002      	add	sp, #8
   b51e2:	bd10      	pop	{r4, pc}

000b51e4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b51e4:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b51e6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b51e8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b51ec:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b51f0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b51f2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b51f4:	d008      	beq.n	b5208 <_ZN9TCPClient4readEv+0x24>
   b51f6:	6963      	ldr	r3, [r4, #20]
   b51f8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b51fc:	1c51      	adds	r1, r2, #1
   b51fe:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b5202:	4413      	add	r3, r2
   b5204:	7918      	ldrb	r0, [r3, #4]
}
   b5206:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5208:	6803      	ldr	r3, [r0, #0]
   b520a:	691b      	ldr	r3, [r3, #16]
   b520c:	4798      	blx	r3
   b520e:	2800      	cmp	r0, #0
   b5210:	d1f1      	bne.n	b51f6 <_ZN9TCPClient4readEv+0x12>
   b5212:	f04f 30ff 	mov.w	r0, #4294967295
   b5216:	e7f6      	b.n	b5206 <_ZN9TCPClient4readEv+0x22>

000b5218 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5218:	4770      	bx	lr

000b521a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b521a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b521c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b521e:	43c0      	mvns	r0, r0
   b5220:	0fc0      	lsrs	r0, r0, #31
   b5222:	4770      	bx	lr

000b5224 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5224:	4770      	bx	lr
	...

000b5228 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5228:	4b06      	ldr	r3, [pc, #24]	; (b5244 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b522a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b522c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b522e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5232:	d005      	beq.n	b5240 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5234:	4608      	mov	r0, r1
   b5236:	f000 fc6f 	bl	b5b18 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b523a:	2800      	cmp	r0, #0
   b523c:	bf08      	it	eq
   b523e:	2400      	moveq	r4, #0
      }
   b5240:	4620      	mov	r0, r4
   b5242:	bd10      	pop	{r4, pc}
   b5244:	000b639c 	.word	0x000b639c

000b5248 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5248:	b510      	push	{r4, lr}
   b524a:	21ac      	movs	r1, #172	; 0xac
   b524c:	4604      	mov	r4, r0
   b524e:	f7fe ff24 	bl	b409a <_ZdlPvj>
   b5252:	4620      	mov	r0, r4
   b5254:	bd10      	pop	{r4, pc}

000b5256 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5256:	21ac      	movs	r1, #172	; 0xac
   b5258:	f7fe bf1f 	b.w	b409a <_ZdlPvj>

000b525c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b525c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5260:	f04f 0800 	mov.w	r8, #0
   b5264:	b086      	sub	sp, #24
   b5266:	461c      	mov	r4, r3
   b5268:	f8c0 8004 	str.w	r8, [r0, #4]
   b526c:	4605      	mov	r5, r0
   b526e:	460e      	mov	r6, r1
   b5270:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5272:	4641      	mov	r1, r8
   b5274:	2210      	movs	r2, #16
   b5276:	a802      	add	r0, sp, #8
   b5278:	f000 fd74 	bl	b5d64 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b527c:	1c63      	adds	r3, r4, #1
   b527e:	d009      	beq.n	b5294 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5284:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b5288:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b528c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5290:	435c      	muls	r4, r3
   b5292:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5294:	6968      	ldr	r0, [r5, #20]
   b5296:	2310      	movs	r3, #16
   b5298:	9300      	str	r3, [sp, #0]
   b529a:	6800      	ldr	r0, [r0, #0]
   b529c:	ab02      	add	r3, sp, #8
   b529e:	f241 0205 	movw	r2, #4101	; 0x1005
   b52a2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b52a6:	f7ff fa37 	bl	b4718 <sock_setsockopt>
    if (ret < 0) {
   b52aa:	2800      	cmp	r0, #0
   b52ac:	da07      	bge.n	b52be <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b52ae:	f7ff fb77 	bl	b49a0 <__errno>
   b52b2:	6803      	ldr	r3, [r0, #0]
   b52b4:	606b      	str	r3, [r5, #4]
        return 0;
   b52b6:	2000      	movs	r0, #0
}
   b52b8:	b006      	add	sp, #24
   b52ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b52be:	6968      	ldr	r0, [r5, #20]
   b52c0:	2300      	movs	r3, #0
   b52c2:	6800      	ldr	r0, [r0, #0]
   b52c4:	463a      	mov	r2, r7
   b52c6:	4631      	mov	r1, r6
   b52c8:	f7ff fa46 	bl	b4758 <sock_send>
    if (ret < 0) {
   b52cc:	1e03      	subs	r3, r0, #0
   b52ce:	dbee      	blt.n	b52ae <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b52d0:	4618      	mov	r0, r3
   b52d2:	e7f1      	b.n	b52b8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b52d4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b52d4:	b530      	push	{r4, r5, lr}
   b52d6:	b087      	sub	sp, #28
   b52d8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b52da:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b52dc:	4668      	mov	r0, sp
   b52de:	f7ff fe2b 	bl	b4f38 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b52e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52e4:	3404      	adds	r4, #4
   b52e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52e8:	682b      	ldr	r3, [r5, #0]
   b52ea:	7023      	strb	r3, [r4, #0]
    }
   b52ec:	b007      	add	sp, #28
   b52ee:	bd30      	pop	{r4, r5, pc}

000b52f0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b52f0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b52f2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b52f4:	4b05      	ldr	r3, [pc, #20]	; (b530c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b52f6:	4604      	mov	r4, r0
   b52f8:	358c      	adds	r5, #140	; 0x8c
   b52fa:	f844 3b04 	str.w	r3, [r4], #4
   b52fe:	4606      	mov	r6, r0
   b5300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5304:	682b      	ldr	r3, [r5, #0]
   b5306:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5308:	4630      	mov	r0, r6
   b530a:	bd70      	pop	{r4, r5, r6, pc}
   b530c:	000b63cc 	.word	0x000b63cc

000b5310 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5314:	4698      	mov	r8, r3
    stop();
   b5316:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5318:	b093      	sub	sp, #76	; 0x4c
   b531a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b531c:	2400      	movs	r4, #0
    stop();
   b531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5320:	4606      	mov	r6, r0
   b5322:	4617      	mov	r7, r2
    stop();
   b5324:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5326:	4628      	mov	r0, r5
   b5328:	466b      	mov	r3, sp
   b532a:	4622      	mov	r2, r4
   b532c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b532e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5330:	f7ff f902 	bl	b4538 <netdb_getaddrinfo>
   b5334:	4605      	mov	r5, r0
   b5336:	2800      	cmp	r0, #0
   b5338:	d163      	bne.n	b5402 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b533a:	9b00      	ldr	r3, [sp, #0]
   b533c:	2b00      	cmp	r3, #0
   b533e:	d04b      	beq.n	b53d8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5340:	695b      	ldr	r3, [r3, #20]
   b5342:	2b00      	cmp	r3, #0
   b5344:	d048      	beq.n	b53d8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b5346:	a806      	add	r0, sp, #24
   b5348:	f7ff fdb2 	bl	b4eb0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b534c:	9b00      	ldr	r3, [sp, #0]
   b534e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5350:	7863      	ldrb	r3, [r4, #1]
   b5352:	2b02      	cmp	r3, #2
   b5354:	d104      	bne.n	b5360 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b5356:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b5358:	a806      	add	r0, sp, #24
   b535a:	f7ff ffbb 	bl	b52d4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b535e:	e026      	b.n	b53ae <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5360:	2b0a      	cmp	r3, #10
   b5362:	d124      	bne.n	b53ae <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5364:	2211      	movs	r2, #17
   b5366:	4629      	mov	r1, r5
   b5368:	a801      	add	r0, sp, #4
   b536a:	f000 fcfb 	bl	b5d64 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b536e:	68a3      	ldr	r3, [r4, #8]
   b5370:	2b00      	cmp	r3, #0
   b5372:	d038      	beq.n	b53e6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5374:	f104 0308 	add.w	r3, r4, #8
   b5378:	f10d 0c04 	add.w	ip, sp, #4
   b537c:	3418      	adds	r4, #24
   b537e:	6818      	ldr	r0, [r3, #0]
   b5380:	6859      	ldr	r1, [r3, #4]
   b5382:	4662      	mov	r2, ip
   b5384:	c203      	stmia	r2!, {r0, r1}
   b5386:	3308      	adds	r3, #8
   b5388:	42a3      	cmp	r3, r4
   b538a:	4694      	mov	ip, r2
   b538c:	d1f7      	bne.n	b537e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b538e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5390:	a901      	add	r1, sp, #4
   b5392:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5394:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5398:	f7ff fd98 	bl	b4ecc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b539c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b53a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b53a4:	ac07      	add	r4, sp, #28
   b53a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53a8:	f8dc 3000 	ldr.w	r3, [ip]
   b53ac:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b53ae:	a806      	add	r0, sp, #24
   b53b0:	f7ff fd9e 	bl	b4ef0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b53b4:	b180      	cbz	r0, b53d8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b53b6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b53b8:	ad07      	add	r5, sp, #28
   b53ba:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b53be:	4b12      	ldr	r3, [pc, #72]	; (b5408 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b53c0:	930c      	str	r3, [sp, #48]	; 0x30
   b53c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53c4:	ac0d      	add	r4, sp, #52	; 0x34
   b53c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53c8:	682b      	ldr	r3, [r5, #0]
   b53ca:	7023      	strb	r3, [r4, #0]
   b53cc:	463a      	mov	r2, r7
   b53ce:	4643      	mov	r3, r8
   b53d0:	a90c      	add	r1, sp, #48	; 0x30
   b53d2:	4630      	mov	r0, r6
   b53d4:	47c8      	blx	r9
   b53d6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b53d8:	9800      	ldr	r0, [sp, #0]
   b53da:	f7ff f8a5 	bl	b4528 <netdb_freeaddrinfo>
}
   b53de:	4628      	mov	r0, r5
   b53e0:	b013      	add	sp, #76	; 0x4c
   b53e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b53e6:	68e3      	ldr	r3, [r4, #12]
   b53e8:	2b00      	cmp	r3, #0
   b53ea:	d1c3      	bne.n	b5374 <_ZN9TCPClient7connectEPKctm+0x64>
   b53ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b53f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b53f4:	f7ff f908 	bl	b4608 <inet_htonl>
   b53f8:	4581      	cmp	r9, r0
   b53fa:	d1bb      	bne.n	b5374 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b53fc:	f104 0114 	add.w	r1, r4, #20
   b5400:	e7aa      	b.n	b5358 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5402:	4625      	mov	r5, r4
   b5404:	e7e8      	b.n	b53d8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b5406:	bf00      	nop
   b5408:	000b63cc 	.word	0x000b63cc

000b540c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b540c:	b538      	push	{r3, r4, r5, lr}
   b540e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5410:	681a      	ldr	r2, [r3, #0]
   b5412:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b5414:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b5416:	da10      	bge.n	b543a <_ZN9TCPClient9connectedEv+0x2e>
   b5418:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b541c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5420:	429a      	cmp	r2, r3
   b5422:	d10a      	bne.n	b543a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5424:	6803      	ldr	r3, [r0, #0]
   b5426:	691b      	ldr	r3, [r3, #16]
   b5428:	4798      	blx	r3
        if (!rv) {
   b542a:	4604      	mov	r4, r0
   b542c:	b928      	cbnz	r0, b543a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b542e:	682b      	ldr	r3, [r5, #0]
   b5430:	4628      	mov	r0, r5
   b5432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5434:	4798      	blx	r3
        rv = available();
   b5436:	4620      	mov	r0, r4
}
   b5438:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b543a:	2001      	movs	r0, #1
   b543c:	e7fc      	b.n	b5438 <_ZN9TCPClient9connectedEv+0x2c>

000b543e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b543e:	b510      	push	{r4, lr}
   b5440:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5442:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5446:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b544a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b544c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b544e:	d005      	beq.n	b545c <_ZN9TCPClient4peekEv+0x1e>
   b5450:	6963      	ldr	r3, [r4, #20]
   b5452:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5456:	4413      	add	r3, r2
   b5458:	7918      	ldrb	r0, [r3, #4]
}
   b545a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b545c:	6803      	ldr	r3, [r0, #0]
   b545e:	691b      	ldr	r3, [r3, #16]
   b5460:	4798      	blx	r3
   b5462:	2800      	cmp	r0, #0
   b5464:	d1f4      	bne.n	b5450 <_ZN9TCPClient4peekEv+0x12>
   b5466:	f04f 30ff 	mov.w	r0, #4294967295
   b546a:	e7f6      	b.n	b545a <_ZN9TCPClient4peekEv+0x1c>

000b546c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b546e:	6943      	ldr	r3, [r0, #20]
   b5470:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5472:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5476:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b547a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b547c:	4605      	mov	r5, r0
   b547e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5480:	d016      	beq.n	b54b0 <_ZN9TCPClient4readEPhj+0x44>
   b5482:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5484:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5488:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b548c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b548e:	42bc      	cmp	r4, r7
   b5490:	bf28      	it	cs
   b5492:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5494:	3304      	adds	r3, #4
   b5496:	4622      	mov	r2, r4
   b5498:	4419      	add	r1, r3
   b549a:	4630      	mov	r0, r6
   b549c:	f000 fc54 	bl	b5d48 <memcpy>
   b54a0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b54a2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b54a6:	4423      	add	r3, r4
   b54a8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b54ac:	4620      	mov	r0, r4
   b54ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b54b0:	6803      	ldr	r3, [r0, #0]
   b54b2:	691b      	ldr	r3, [r3, #16]
   b54b4:	4798      	blx	r3
   b54b6:	2800      	cmp	r0, #0
   b54b8:	d1e3      	bne.n	b5482 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b54ba:	f04f 34ff 	mov.w	r4, #4294967295
   b54be:	e7f5      	b.n	b54ac <_ZN9TCPClient4readEPhj+0x40>

000b54c0 <_ZN9TCPClient12flush_bufferEv>:
   b54c0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b54c2:	2300      	movs	r3, #0
   b54c4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b54c8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b54ca:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b54ce:	4770      	bx	lr

000b54d0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b54d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b54d4:	461f      	mov	r7, r3
    stop();
   b54d6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b54d8:	460c      	mov	r4, r1
    stop();
   b54da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b54dc:	b08a      	sub	sp, #40	; 0x28
   b54de:	4605      	mov	r5, r0
   b54e0:	4616      	mov	r6, r2
    stop();
   b54e2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b54e4:	7d23      	ldrb	r3, [r4, #20]
   b54e6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b54ea:	2b04      	cmp	r3, #4
   b54ec:	bf0c      	ite	eq
   b54ee:	2002      	moveq	r0, #2
   b54f0:	200a      	movne	r0, #10
   b54f2:	2206      	movs	r2, #6
   b54f4:	2101      	movs	r1, #1
   b54f6:	f7ff f937 	bl	b4768 <sock_socket>
   b54fa:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b54fe:	696b      	ldr	r3, [r5, #20]
   b5500:	681b      	ldr	r3, [r3, #0]
   b5502:	2b00      	cmp	r3, #0
   b5504:	da08      	bge.n	b5518 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b5506:	682b      	ldr	r3, [r5, #0]
   b5508:	4628      	mov	r0, r5
   b550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b550c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b550e:	4798      	blx	r3
}
   b5510:	4620      	mov	r0, r4
   b5512:	b00a      	add	sp, #40	; 0x28
   b5514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5518:	4628      	mov	r0, r5
   b551a:	f7ff ffd1 	bl	b54c0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b551e:	b1b7      	cbz	r7, b554e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5520:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5522:	a903      	add	r1, sp, #12
   b5524:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b5526:	9303      	str	r3, [sp, #12]
   b5528:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b552c:	f7ff f83c 	bl	b45a8 <if_index_to_name>
   b5530:	2800      	cmp	r0, #0
   b5532:	d1e8      	bne.n	b5506 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5534:	6968      	ldr	r0, [r5, #20]
   b5536:	2306      	movs	r3, #6
   b5538:	9300      	str	r3, [sp, #0]
   b553a:	6800      	ldr	r0, [r0, #0]
   b553c:	ab03      	add	r3, sp, #12
   b553e:	f241 020b 	movw	r2, #4107	; 0x100b
   b5542:	f640 71ff 	movw	r1, #4095	; 0xfff
   b5546:	f7ff f8e7 	bl	b4718 <sock_setsockopt>
   b554a:	2800      	cmp	r0, #0
   b554c:	d1db      	bne.n	b5506 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b554e:	221c      	movs	r2, #28
   b5550:	2100      	movs	r1, #0
   b5552:	a803      	add	r0, sp, #12
   b5554:	f000 fc06 	bl	b5d64 <memset>
    if (ip.version() == 4) {
   b5558:	7d23      	ldrb	r3, [r4, #20]
   b555a:	2b04      	cmp	r3, #4
   b555c:	d11d      	bne.n	b559a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b555e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5562:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5564:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b5568:	f7ff f856 	bl	b4618 <inet_htons>
   b556c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5570:	6860      	ldr	r0, [r4, #4]
   b5572:	f7ff f849 	bl	b4608 <inet_htonl>
   b5576:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b5578:	696b      	ldr	r3, [r5, #20]
   b557a:	221c      	movs	r2, #28
   b557c:	6818      	ldr	r0, [r3, #0]
   b557e:	a903      	add	r1, sp, #12
   b5580:	f7ff f8da 	bl	b4738 <sock_connect>
   b5584:	2800      	cmp	r0, #0
   b5586:	d1be      	bne.n	b5506 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5588:	3404      	adds	r4, #4
   b558a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b558c:	696d      	ldr	r5, [r5, #20]
   b558e:	358c      	adds	r5, #140	; 0x8c
   b5590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5592:	6823      	ldr	r3, [r4, #0]
   b5594:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b5596:	2401      	movs	r4, #1
   b5598:	e7ba      	b.n	b5510 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b559a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b559e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b55a0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b55a4:	f7ff f838 	bl	b4618 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b55a8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b55aa:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b55ae:	1d23      	adds	r3, r4, #4
   b55b0:	f104 0714 	add.w	r7, r4, #20
   b55b4:	6818      	ldr	r0, [r3, #0]
   b55b6:	6859      	ldr	r1, [r3, #4]
   b55b8:	4632      	mov	r2, r6
   b55ba:	c203      	stmia	r2!, {r0, r1}
   b55bc:	3308      	adds	r3, #8
   b55be:	42bb      	cmp	r3, r7
   b55c0:	4616      	mov	r6, r2
   b55c2:	d1f7      	bne.n	b55b4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b55c4:	e7d8      	b.n	b5578 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b55c8 <_ZN9TCPClient9availableEv>:
{
   b55c8:	b530      	push	{r4, r5, lr}
   b55ca:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b55cc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b55d0:	b08b      	sub	sp, #44	; 0x2c
   b55d2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b55d4:	b12b      	cbz	r3, b55e2 <_ZN9TCPClient9availableEv+0x1a>
   b55d6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b55da:	429a      	cmp	r2, r3
   b55dc:	d101      	bne.n	b55e2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b55de:	f7ff ff6f 	bl	b54c0 <_ZN9TCPClient12flush_bufferEv>
   b55e2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b55e4:	6808      	ldr	r0, [r1, #0]
   b55e6:	2800      	cmp	r0, #0
   b55e8:	db18      	blt.n	b561c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b55ea:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b55ee:	2d7f      	cmp	r5, #127	; 0x7f
   b55f0:	d814      	bhi.n	b561c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b55f2:	3104      	adds	r1, #4
   b55f4:	2308      	movs	r3, #8
   b55f6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b55fa:	4429      	add	r1, r5
   b55fc:	f7ff f8a4 	bl	b4748 <sock_recv>
            if (ret > 0) {
   b5600:	2800      	cmp	r0, #0
   b5602:	dd13      	ble.n	b562c <_ZN9TCPClient9availableEv+0x64>
   b5604:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b5606:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b560a:	b90a      	cbnz	r2, b5610 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b560c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5610:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b5612:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5616:	4410      	add	r0, r2
   b5618:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b561c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b561e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5622:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b5626:	1ac0      	subs	r0, r0, r3
   b5628:	b00b      	add	sp, #44	; 0x2c
   b562a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b562c:	f7ff f9b8 	bl	b49a0 <__errno>
   b5630:	6803      	ldr	r3, [r0, #0]
   b5632:	2b0b      	cmp	r3, #11
   b5634:	d0f2      	beq.n	b561c <_ZN9TCPClient9availableEv+0x54>
   b5636:	f7ff f9b3 	bl	b49a0 <__errno>
   b563a:	6803      	ldr	r3, [r0, #0]
   b563c:	2b0b      	cmp	r3, #11
   b563e:	d0ed      	beq.n	b561c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5640:	2320      	movs	r3, #32
   b5642:	2500      	movs	r5, #0
   b5644:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b5648:	f7ff f9aa 	bl	b49a0 <__errno>
   b564c:	6803      	ldr	r3, [r0, #0]
   b564e:	9301      	str	r3, [sp, #4]
   b5650:	4b08      	ldr	r3, [pc, #32]	; (b5674 <_ZN9TCPClient9availableEv+0xac>)
   b5652:	4909      	ldr	r1, [pc, #36]	; (b5678 <_ZN9TCPClient9availableEv+0xb0>)
   b5654:	9300      	str	r3, [sp, #0]
   b5656:	aa02      	add	r2, sp, #8
   b5658:	462b      	mov	r3, r5
   b565a:	2032      	movs	r0, #50	; 0x32
   b565c:	f7ff f8dc 	bl	b4818 <log_message>
                    sock_close(d_->sock);
   b5660:	6963      	ldr	r3, [r4, #20]
   b5662:	6818      	ldr	r0, [r3, #0]
   b5664:	f7ff f860 	bl	b4728 <sock_close>
   b5668:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b566a:	f04f 32ff 	mov.w	r2, #4294967295
   b566e:	601a      	str	r2, [r3, #0]
   b5670:	e7d4      	b.n	b561c <_ZN9TCPClient9availableEv+0x54>
   b5672:	bf00      	nop
   b5674:	000b6467 	.word	0x000b6467
   b5678:	000b6460 	.word	0x000b6460

000b567c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b567c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b567e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5680:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5682:	6818      	ldr	r0, [r3, #0]
   b5684:	2800      	cmp	r0, #0
   b5686:	db01      	blt.n	b568c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5688:	f7ff f84e 	bl	b4728 <sock_close>
   b568c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b568e:	f04f 32ff 	mov.w	r2, #4294967295
   b5692:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5694:	6960      	ldr	r0, [r4, #20]
   b5696:	2211      	movs	r2, #17
   b5698:	2100      	movs	r1, #0
   b569a:	308c      	adds	r0, #140	; 0x8c
   b569c:	f000 fb62 	bl	b5d64 <memset>
    flush_buffer();
   b56a0:	4620      	mov	r0, r4
}
   b56a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b56a6:	f7ff bf0b 	b.w	b54c0 <_ZN9TCPClient12flush_bufferEv>

000b56aa <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b56aa:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b56ac:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b56ae:	4604      	mov	r4, r0
          total(0) {
   b56b0:	6001      	str	r1, [r0, #0]
   b56b2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b56b6:	3088      	adds	r0, #136	; 0x88
   b56b8:	f7ff fbfa 	bl	b4eb0 <_ZN9IPAddressC1Ev>
}
   b56bc:	4620      	mov	r0, r4
   b56be:	bd10      	pop	{r4, pc}

000b56c0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b56c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b56c2:	2300      	movs	r3, #0
   b56c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b56c8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b56cc:	4a0e      	ldr	r2, [pc, #56]	; (b5708 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b56ce:	6103      	str	r3, [r0, #16]
   b56d0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b56d2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b56d4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b56d6:	20ac      	movs	r0, #172	; 0xac
   b56d8:	9101      	str	r1, [sp, #4]
   b56da:	f7fe fcda 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b56de:	1e05      	subs	r5, r0, #0
   b56e0:	f105 060c 	add.w	r6, r5, #12
   b56e4:	d008      	beq.n	b56f8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b56e6:	2301      	movs	r3, #1
   b56e8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b56ec:	4b07      	ldr	r3, [pc, #28]	; (b570c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b56ee:	9901      	ldr	r1, [sp, #4]
   b56f0:	602b      	str	r3, [r5, #0]
   b56f2:	4630      	mov	r0, r6
   b56f4:	f7ff ffd9 	bl	b56aa <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b56f8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b56fa:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b56fe:	f7ff fedf 	bl	b54c0 <_ZN9TCPClient12flush_bufferEv>
}
   b5702:	b002      	add	sp, #8
   b5704:	bd70      	pop	{r4, r5, r6, pc}
   b5706:	bf00      	nop
   b5708:	000b649c 	.word	0x000b649c
   b570c:	000b6480 	.word	0x000b6480

000b5710 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5710:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5712:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b5716:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5718:	f7ff ffd2 	bl	b56c0 <_ZN9TCPClientC1Ei>
}
   b571c:	4620      	mov	r0, r4
   b571e:	bd10      	pop	{r4, pc}

000b5720 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5720:	b510      	push	{r4, lr}
   b5722:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5724:	6800      	ldr	r0, [r0, #0]
   b5726:	2800      	cmp	r0, #0
   b5728:	db01      	blt.n	b572e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b572a:	f7fe fffd 	bl	b4728 <sock_close>
    }
}
   b572e:	4620      	mov	r0, r4
   b5730:	bd10      	pop	{r4, pc}

000b5732 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5732:	300c      	adds	r0, #12
   b5734:	f7ff bff4 	b.w	b5720 <_ZN9TCPClient4DataD1Ev>

000b5738 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5738:	2200      	movs	r2, #0
   b573a:	6840      	ldr	r0, [r0, #4]
   b573c:	4611      	mov	r1, r2
   b573e:	f7ff b8af 	b.w	b48a0 <network_ready>

000b5742 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5742:	2200      	movs	r2, #0
   b5744:	6840      	ldr	r0, [r0, #4]
   b5746:	4611      	mov	r1, r2
   b5748:	f7ff b8ca 	b.w	b48e0 <network_listening>

000b574c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b574c:	2200      	movs	r2, #0
   b574e:	6840      	ldr	r0, [r0, #4]
   b5750:	4611      	mov	r1, r2
   b5752:	f7ff b8dd 	b.w	b4910 <network_get_listen_timeout>

000b5756 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5756:	6840      	ldr	r0, [r0, #4]
   b5758:	2200      	movs	r2, #0
   b575a:	f7ff b8d1 	b.w	b4900 <network_set_listen_timeout>

000b575e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b575e:	6840      	ldr	r0, [r0, #4]
   b5760:	2200      	movs	r2, #0
   b5762:	f081 0101 	eor.w	r1, r1, #1
   b5766:	f7ff b8b3 	b.w	b48d0 <network_listen>

000b576a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b576a:	2300      	movs	r3, #0
   b576c:	6840      	ldr	r0, [r0, #4]
   b576e:	461a      	mov	r2, r3
   b5770:	4619      	mov	r1, r3
   b5772:	f7ff b8a5 	b.w	b48c0 <network_off>

000b5776 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5776:	2300      	movs	r3, #0
   b5778:	6840      	ldr	r0, [r0, #4]
   b577a:	461a      	mov	r2, r3
   b577c:	4619      	mov	r1, r3
   b577e:	f7ff b897 	b.w	b48b0 <network_on>

000b5782 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5782:	2200      	movs	r2, #0
   b5784:	6840      	ldr	r0, [r0, #4]
   b5786:	4611      	mov	r1, r2
   b5788:	f7ff b87a 	b.w	b4880 <network_connecting>

000b578c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b578c:	6840      	ldr	r0, [r0, #4]
   b578e:	2200      	movs	r2, #0
   b5790:	2102      	movs	r1, #2
   b5792:	f7ff b87d 	b.w	b4890 <network_disconnect>

000b5796 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5796:	2300      	movs	r3, #0
   b5798:	6840      	ldr	r0, [r0, #4]
   b579a:	461a      	mov	r2, r3
   b579c:	f7ff b868 	b.w	b4870 <network_connect>

000b57a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b57a0:	4b02      	ldr	r3, [pc, #8]	; (b57ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b57a2:	2204      	movs	r2, #4
   b57a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b57a6:	4a02      	ldr	r2, [pc, #8]	; (b57b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b57a8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b57aa:	4770      	bx	lr
   b57ac:	2003e70c 	.word	0x2003e70c
   b57b0:	000b64e8 	.word	0x000b64e8

000b57b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b57b4:	2300      	movs	r3, #0
   b57b6:	6840      	ldr	r0, [r0, #4]
   b57b8:	461a      	mov	r2, r3
   b57ba:	f7ff b859 	b.w	b4870 <network_connect>

000b57be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b57be:	6840      	ldr	r0, [r0, #4]
   b57c0:	2200      	movs	r2, #0
   b57c2:	2102      	movs	r1, #2
   b57c4:	f7ff b864 	b.w	b4890 <network_disconnect>

000b57c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b57c8:	2200      	movs	r2, #0
   b57ca:	6840      	ldr	r0, [r0, #4]
   b57cc:	4611      	mov	r1, r2
   b57ce:	f7ff b857 	b.w	b4880 <network_connecting>

000b57d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b57d2:	2200      	movs	r2, #0
   b57d4:	6840      	ldr	r0, [r0, #4]
   b57d6:	4611      	mov	r1, r2
   b57d8:	f7ff b862 	b.w	b48a0 <network_ready>

000b57dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b57dc:	2300      	movs	r3, #0
   b57de:	6840      	ldr	r0, [r0, #4]
   b57e0:	461a      	mov	r2, r3
   b57e2:	4619      	mov	r1, r3
   b57e4:	f7ff b864 	b.w	b48b0 <network_on>

000b57e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b57e8:	2300      	movs	r3, #0
   b57ea:	6840      	ldr	r0, [r0, #4]
   b57ec:	461a      	mov	r2, r3
   b57ee:	4619      	mov	r1, r3
   b57f0:	f7ff b866 	b.w	b48c0 <network_off>

000b57f4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b57f4:	6840      	ldr	r0, [r0, #4]
   b57f6:	2100      	movs	r1, #0
   b57f8:	f7ff b892 	b.w	b4920 <network_is_on>

000b57fc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b57fc:	6840      	ldr	r0, [r0, #4]
   b57fe:	2100      	movs	r1, #0
   b5800:	f7ff b896 	b.w	b4930 <network_is_off>

000b5804 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5804:	6840      	ldr	r0, [r0, #4]
   b5806:	2200      	movs	r2, #0
   b5808:	f081 0101 	eor.w	r1, r1, #1
   b580c:	f7ff b860 	b.w	b48d0 <network_listen>

000b5810 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5810:	6840      	ldr	r0, [r0, #4]
   b5812:	2200      	movs	r2, #0
   b5814:	f7ff b874 	b.w	b4900 <network_set_listen_timeout>

000b5818 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5818:	2200      	movs	r2, #0
   b581a:	6840      	ldr	r0, [r0, #4]
   b581c:	4611      	mov	r1, r2
   b581e:	f7ff b877 	b.w	b4910 <network_get_listen_timeout>

000b5822 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5822:	2200      	movs	r2, #0
   b5824:	6840      	ldr	r0, [r0, #4]
   b5826:	4611      	mov	r1, r2
   b5828:	f7ff b85a 	b.w	b48e0 <network_listening>

000b582c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b582c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5830:	b095      	sub	sp, #84	; 0x54
   b5832:	4614      	mov	r4, r2
   b5834:	460d      	mov	r5, r1
   b5836:	4607      	mov	r7, r0
    IPAddress addr;
   b5838:	f7ff fb3a 	bl	b4eb0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b583c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b583e:	221c      	movs	r2, #28
   b5840:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5842:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5844:	f000 fa8e 	bl	b5d64 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5848:	2340      	movs	r3, #64	; 0x40
   b584a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b584c:	4620      	mov	r0, r4
   b584e:	466b      	mov	r3, sp
   b5850:	aa0c      	add	r2, sp, #48	; 0x30
   b5852:	2100      	movs	r1, #0
   b5854:	f7fe fe70 	bl	b4538 <netdb_getaddrinfo>
    if (!r) {
   b5858:	4604      	mov	r4, r0
   b585a:	2800      	cmp	r0, #0
   b585c:	d14b      	bne.n	b58f6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b585e:	4602      	mov	r2, r0
   b5860:	2101      	movs	r1, #1
   b5862:	6868      	ldr	r0, [r5, #4]
   b5864:	f7ff f81c 	bl	b48a0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5868:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b586a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b586c:	4622      	mov	r2, r4
   b586e:	6868      	ldr	r0, [r5, #4]
   b5870:	f7ff f816 	bl	b48a0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5874:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5876:	4681      	mov	r9, r0
        bool ok = false;
   b5878:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b587a:	2e00      	cmp	r6, #0
   b587c:	d03b      	beq.n	b58f6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b587e:	2900      	cmp	r1, #0
   b5880:	d139      	bne.n	b58f6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5882:	6873      	ldr	r3, [r6, #4]
   b5884:	2b02      	cmp	r3, #2
   b5886:	d003      	beq.n	b5890 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5888:	2b0a      	cmp	r3, #10
   b588a:	d011      	beq.n	b58b0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b588c:	69f6      	ldr	r6, [r6, #28]
   b588e:	e7f4      	b.n	b587a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5890:	f1b8 0f00 	cmp.w	r8, #0
   b5894:	d0fa      	beq.n	b588c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5896:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5898:	a806      	add	r0, sp, #24
   b589a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b589c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b589e:	f7ff fb4b 	bl	b4f38 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b58a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b58a4:	1d3c      	adds	r4, r7, #4
   b58a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b58a8:	682b      	ldr	r3, [r5, #0]
   b58aa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b58ac:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b58ae:	e7ed      	b.n	b588c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b58b0:	f1b9 0f00 	cmp.w	r9, #0
   b58b4:	d0ea      	beq.n	b588c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b58b6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b58b8:	2210      	movs	r2, #16
   b58ba:	a801      	add	r0, sp, #4
   b58bc:	f000 fa52 	bl	b5d64 <memset>
                    a.v = 6;
   b58c0:	2306      	movs	r3, #6
   b58c2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b58c6:	ad01      	add	r5, sp, #4
   b58c8:	f104 0308 	add.w	r3, r4, #8
   b58cc:	3418      	adds	r4, #24
   b58ce:	6818      	ldr	r0, [r3, #0]
   b58d0:	6859      	ldr	r1, [r3, #4]
   b58d2:	462a      	mov	r2, r5
   b58d4:	c203      	stmia	r2!, {r0, r1}
   b58d6:	3308      	adds	r3, #8
   b58d8:	42a3      	cmp	r3, r4
   b58da:	4615      	mov	r5, r2
   b58dc:	d1f7      	bne.n	b58ce <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b58de:	a901      	add	r1, sp, #4
   b58e0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b58e2:	ad07      	add	r5, sp, #28
   b58e4:	f7ff faf2 	bl	b4ecc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b58e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b58ea:	1d3c      	adds	r4, r7, #4
   b58ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b58ee:	682b      	ldr	r3, [r5, #0]
   b58f0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b58f2:	4649      	mov	r1, r9
   b58f4:	e7ca      	b.n	b588c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b58f6:	9800      	ldr	r0, [sp, #0]
   b58f8:	f7fe fe16 	bl	b4528 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b58fc:	4638      	mov	r0, r7
   b58fe:	b015      	add	sp, #84	; 0x54
   b5900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5904 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5904:	4b02      	ldr	r3, [pc, #8]	; (b5910 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5906:	4a03      	ldr	r2, [pc, #12]	; (b5914 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5908:	601a      	str	r2, [r3, #0]
   b590a:	2200      	movs	r2, #0
   b590c:	605a      	str	r2, [r3, #4]

} // spark
   b590e:	4770      	bx	lr
   b5910:	2003e714 	.word	0x2003e714
   b5914:	000b6524 	.word	0x000b6524

000b5918 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5918:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b591a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b591c:	d902      	bls.n	b5924 <pinAvailable+0xc>
    return false;
   b591e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5920:	b002      	add	sp, #8
   b5922:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5924:	f1a0 030b 	sub.w	r3, r0, #11
   b5928:	2b02      	cmp	r3, #2
   b592a:	d81a      	bhi.n	b5962 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b592c:	4c17      	ldr	r4, [pc, #92]	; (b598c <pinAvailable+0x74>)
   b592e:	7821      	ldrb	r1, [r4, #0]
   b5930:	f3bf 8f5b 	dmb	ish
   b5934:	f011 0101 	ands.w	r1, r1, #1
   b5938:	d10b      	bne.n	b5952 <pinAvailable+0x3a>
   b593a:	4620      	mov	r0, r4
   b593c:	9101      	str	r1, [sp, #4]
   b593e:	f7fe fbae 	bl	b409e <__cxa_guard_acquire>
   b5942:	9901      	ldr	r1, [sp, #4]
   b5944:	b128      	cbz	r0, b5952 <pinAvailable+0x3a>
   b5946:	4812      	ldr	r0, [pc, #72]	; (b5990 <pinAvailable+0x78>)
   b5948:	f7ff f880 	bl	b4a4c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b594c:	4620      	mov	r0, r4
   b594e:	f7fe fbab 	bl	b40a8 <__cxa_guard_release>
   b5952:	4b0f      	ldr	r3, [pc, #60]	; (b5990 <pinAvailable+0x78>)
   b5954:	7818      	ldrb	r0, [r3, #0]
   b5956:	f7fe ff17 	bl	b4788 <hal_spi_is_enabled>
   b595a:	2800      	cmp	r0, #0
   b595c:	d1df      	bne.n	b591e <pinAvailable+0x6>
  return true; // 'pin' is available
   b595e:	2001      	movs	r0, #1
   b5960:	e7de      	b.n	b5920 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5962:	2801      	cmp	r0, #1
   b5964:	d809      	bhi.n	b597a <pinAvailable+0x62>
   b5966:	f000 f8b1 	bl	b5acc <_Z19__fetch_global_Wirev>
   b596a:	2100      	movs	r1, #0
   b596c:	7c00      	ldrb	r0, [r0, #16]
   b596e:	f7fe fec3 	bl	b46f8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5972:	f080 0001 	eor.w	r0, r0, #1
   b5976:	b2c0      	uxtb	r0, r0
   b5978:	e7d2      	b.n	b5920 <pinAvailable+0x8>
   b597a:	3809      	subs	r0, #9
   b597c:	2801      	cmp	r0, #1
   b597e:	d8ee      	bhi.n	b595e <pinAvailable+0x46>
   b5980:	f000 f864 	bl	b5a4c <_Z22__fetch_global_Serial1v>
   b5984:	7c00      	ldrb	r0, [r0, #16]
   b5986:	f7fe fe77 	bl	b4678 <hal_usart_is_enabled>
   b598a:	e7f2      	b.n	b5972 <pinAvailable+0x5a>
   b598c:	2003e71c 	.word	0x2003e71c
   b5990:	2003e720 	.word	0x2003e720

000b5994 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5994:	2823      	cmp	r0, #35	; 0x23
{
   b5996:	b538      	push	{r3, r4, r5, lr}
   b5998:	4604      	mov	r4, r0
   b599a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b599c:	d80a      	bhi.n	b59b4 <pinMode+0x20>
   b599e:	29ff      	cmp	r1, #255	; 0xff
   b59a0:	d008      	beq.n	b59b4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b59a2:	f7ff ffb9 	bl	b5918 <pinAvailable>
   b59a6:	b128      	cbz	r0, b59b4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b59a8:	4629      	mov	r1, r5
   b59aa:	4620      	mov	r0, r4
}
   b59ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b59b0:	f7fe bdda 	b.w	b4568 <HAL_Pin_Mode>
}
   b59b4:	bd38      	pop	{r3, r4, r5, pc}

000b59b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b59b6:	b538      	push	{r3, r4, r5, lr}
   b59b8:	4604      	mov	r4, r0
   b59ba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b59bc:	f7fe fddc 	bl	b4578 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b59c0:	28ff      	cmp	r0, #255	; 0xff
   b59c2:	d010      	beq.n	b59e6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b59c4:	2806      	cmp	r0, #6
   b59c6:	d804      	bhi.n	b59d2 <digitalWrite+0x1c>
   b59c8:	234d      	movs	r3, #77	; 0x4d
   b59ca:	fa23 f000 	lsr.w	r0, r3, r0
   b59ce:	07c3      	lsls	r3, r0, #31
   b59d0:	d409      	bmi.n	b59e6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b59d2:	4620      	mov	r0, r4
   b59d4:	f7ff ffa0 	bl	b5918 <pinAvailable>
   b59d8:	b128      	cbz	r0, b59e6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b59da:	4629      	mov	r1, r5
   b59dc:	4620      	mov	r0, r4
}
   b59de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b59e2:	f7fe bdd1 	b.w	b4588 <HAL_GPIO_Write>
}
   b59e6:	bd38      	pop	{r3, r4, r5, pc}

000b59e8 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b59e8:	280d      	cmp	r0, #13
{
   b59ea:	b510      	push	{r4, lr}
   b59ec:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b59ee:	bf9c      	itt	ls
   b59f0:	340e      	addls	r4, #14
   b59f2:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b59f4:	4620      	mov	r0, r4
   b59f6:	f7ff ff8f 	bl	b5918 <pinAvailable>
   b59fa:	b150      	cbz	r0, b5a12 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b59fc:	2103      	movs	r1, #3
   b59fe:	4620      	mov	r0, r4
   b5a00:	f7fe fdaa 	bl	b4558 <HAL_Validate_Pin_Function>
   b5a04:	2803      	cmp	r0, #3
   b5a06:	d104      	bne.n	b5a12 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b5a08:	4620      	mov	r0, r4
}
   b5a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b5a0e:	f7fe bdc3 	b.w	b4598 <hal_adc_read>
}
   b5a12:	2000      	movs	r0, #0
   b5a14:	bd10      	pop	{r4, pc}

000b5a16 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5a16:	4770      	bx	lr

000b5a18 <_Z20acquireSerial1Bufferv>:
{
   b5a18:	b538      	push	{r3, r4, r5, lr}
   b5a1a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5a1c:	2514      	movs	r5, #20
   b5a1e:	462a      	mov	r2, r5
   b5a20:	2100      	movs	r1, #0
   b5a22:	f000 f99f 	bl	b5d64 <memset>
   b5a26:	8025      	strh	r5, [r4, #0]
   b5a28:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a2a:	4907      	ldr	r1, [pc, #28]	; (b5a48 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5a2c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a2e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5a30:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a32:	f000 f86f 	bl	b5b14 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a36:	4904      	ldr	r1, [pc, #16]	; (b5a48 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5a38:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a3a:	4628      	mov	r0, r5
   b5a3c:	f000 f86a 	bl	b5b14 <_ZnajRKSt9nothrow_t>
    };
   b5a40:	60e0      	str	r0, [r4, #12]
}
   b5a42:	4620      	mov	r0, r4
   b5a44:	bd38      	pop	{r3, r4, r5, pc}
   b5a46:	bf00      	nop
   b5a48:	000b6558 	.word	0x000b6558

000b5a4c <_Z22__fetch_global_Serial1v>:
{
   b5a4c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5a4e:	4d0e      	ldr	r5, [pc, #56]	; (b5a88 <_Z22__fetch_global_Serial1v+0x3c>)
   b5a50:	7829      	ldrb	r1, [r5, #0]
   b5a52:	f3bf 8f5b 	dmb	ish
   b5a56:	f011 0401 	ands.w	r4, r1, #1
{
   b5a5a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5a5c:	d111      	bne.n	b5a82 <_Z22__fetch_global_Serial1v+0x36>
   b5a5e:	4628      	mov	r0, r5
   b5a60:	f7fe fb1d 	bl	b409e <__cxa_guard_acquire>
   b5a64:	b168      	cbz	r0, b5a82 <_Z22__fetch_global_Serial1v+0x36>
   b5a66:	a801      	add	r0, sp, #4
   b5a68:	f7ff ffd6 	bl	b5a18 <_Z20acquireSerial1Bufferv>
   b5a6c:	aa01      	add	r2, sp, #4
   b5a6e:	4621      	mov	r1, r4
   b5a70:	4806      	ldr	r0, [pc, #24]	; (b5a8c <_Z22__fetch_global_Serial1v+0x40>)
   b5a72:	f7ff fb37 	bl	b50e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5a76:	4628      	mov	r0, r5
   b5a78:	f7fe fb16 	bl	b40a8 <__cxa_guard_release>
   b5a7c:	4804      	ldr	r0, [pc, #16]	; (b5a90 <_Z22__fetch_global_Serial1v+0x44>)
   b5a7e:	f000 f95d 	bl	b5d3c <atexit>
    return serial1;
}
   b5a82:	4802      	ldr	r0, [pc, #8]	; (b5a8c <_Z22__fetch_global_Serial1v+0x40>)
   b5a84:	b007      	add	sp, #28
   b5a86:	bd30      	pop	{r4, r5, pc}
   b5a88:	2003e728 	.word	0x2003e728
   b5a8c:	2003e72c 	.word	0x2003e72c
   b5a90:	000b5a17 	.word	0x000b5a17

000b5a94 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5a94:	4770      	bx	lr
	...

000b5a98 <_Z17acquireWireBufferv>:
{
   b5a98:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5a9a:	4b0a      	ldr	r3, [pc, #40]	; (b5ac4 <_Z17acquireWireBufferv+0x2c>)
   b5a9c:	6003      	str	r3, [r0, #0]
   b5a9e:	2301      	movs	r3, #1
{
   b5aa0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5aa2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5aa4:	4908      	ldr	r1, [pc, #32]	; (b5ac8 <_Z17acquireWireBufferv+0x30>)
   b5aa6:	2020      	movs	r0, #32
   b5aa8:	f000 f834 	bl	b5b14 <_ZnajRKSt9nothrow_t>
	};
   b5aac:	2520      	movs	r5, #32
   b5aae:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5ab0:	4905      	ldr	r1, [pc, #20]	; (b5ac8 <_Z17acquireWireBufferv+0x30>)
	};
   b5ab2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5ab4:	4628      	mov	r0, r5
   b5ab6:	f000 f82d 	bl	b5b14 <_ZnajRKSt9nothrow_t>
	};
   b5aba:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5abe:	4620      	mov	r0, r4
   b5ac0:	bd38      	pop	{r3, r4, r5, pc}
   b5ac2:	bf00      	nop
   b5ac4:	00010018 	.word	0x00010018
   b5ac8:	000b6558 	.word	0x000b6558

000b5acc <_Z19__fetch_global_Wirev>:
{
   b5acc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5ace:	4d0e      	ldr	r5, [pc, #56]	; (b5b08 <_Z19__fetch_global_Wirev+0x3c>)
   b5ad0:	7829      	ldrb	r1, [r5, #0]
   b5ad2:	f3bf 8f5b 	dmb	ish
   b5ad6:	f011 0401 	ands.w	r4, r1, #1
{
   b5ada:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5adc:	d111      	bne.n	b5b02 <_Z19__fetch_global_Wirev+0x36>
   b5ade:	4628      	mov	r0, r5
   b5ae0:	f7fe fadd 	bl	b409e <__cxa_guard_acquire>
   b5ae4:	b168      	cbz	r0, b5b02 <_Z19__fetch_global_Wirev+0x36>
   b5ae6:	4668      	mov	r0, sp
   b5ae8:	f7ff ffd6 	bl	b5a98 <_Z17acquireWireBufferv>
   b5aec:	466a      	mov	r2, sp
   b5aee:	4621      	mov	r1, r4
   b5af0:	4806      	ldr	r0, [pc, #24]	; (b5b0c <_Z19__fetch_global_Wirev+0x40>)
   b5af2:	f7ff fb37 	bl	b5164 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5af6:	4628      	mov	r0, r5
   b5af8:	f7fe fad6 	bl	b40a8 <__cxa_guard_release>
   b5afc:	4804      	ldr	r0, [pc, #16]	; (b5b10 <_Z19__fetch_global_Wirev+0x44>)
   b5afe:	f000 f91d 	bl	b5d3c <atexit>
	return wire;
}
   b5b02:	4802      	ldr	r0, [pc, #8]	; (b5b0c <_Z19__fetch_global_Wirev+0x40>)
   b5b04:	b007      	add	sp, #28
   b5b06:	bd30      	pop	{r4, r5, pc}
   b5b08:	2003e744 	.word	0x2003e744
   b5b0c:	2003e748 	.word	0x2003e748
   b5b10:	000b5a95 	.word	0x000b5a95

000b5b14 <_ZnajRKSt9nothrow_t>:
   b5b14:	f7fe babf 	b.w	b4096 <_Znaj>

000b5b18 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b5b18:	4901      	ldr	r1, [pc, #4]	; (b5b20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b5b1a:	f000 b8f9 	b.w	b5d10 <_ZNKSt9type_infoeqERKS_>
   b5b1e:	bf00      	nop
   b5b20:	000b6574 	.word	0x000b6574

000b5b24 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b5b24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5b26:	2400      	movs	r4, #0
   b5b28:	2310      	movs	r3, #16
   b5b2a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b5b2e:	6803      	ldr	r3, [r0, #0]
   b5b30:	4615      	mov	r5, r2
   b5b32:	699e      	ldr	r6, [r3, #24]
   b5b34:	6812      	ldr	r2, [r2, #0]
   b5b36:	466b      	mov	r3, sp
   b5b38:	e9cd 4400 	strd	r4, r4, [sp]
   b5b3c:	47b0      	blx	r6
   b5b3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5b42:	f003 0306 	and.w	r3, r3, #6
   b5b46:	2b06      	cmp	r3, #6
   b5b48:	bf03      	ittte	eq
   b5b4a:	9b00      	ldreq	r3, [sp, #0]
   b5b4c:	602b      	streq	r3, [r5, #0]
   b5b4e:	2001      	moveq	r0, #1
   b5b50:	4620      	movne	r0, r4
   b5b52:	b004      	add	sp, #16
   b5b54:	bd70      	pop	{r4, r5, r6, pc}

000b5b56 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b5b56:	9800      	ldr	r0, [sp, #0]
   b5b58:	4290      	cmp	r0, r2
   b5b5a:	bf14      	ite	ne
   b5b5c:	2001      	movne	r0, #1
   b5b5e:	2006      	moveq	r0, #6
   b5b60:	4770      	bx	lr
	...

000b5b64 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b5b64:	b510      	push	{r4, lr}
   b5b66:	4b03      	ldr	r3, [pc, #12]	; (b5b74 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b5b68:	6003      	str	r3, [r0, #0]
   b5b6a:	4604      	mov	r4, r0
   b5b6c:	f000 f8cd 	bl	b5d0a <_ZNSt9type_infoD1Ev>
   b5b70:	4620      	mov	r0, r4
   b5b72:	bd10      	pop	{r4, pc}
   b5b74:	000b65b4 	.word	0x000b65b4

000b5b78 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b5b78:	b510      	push	{r4, lr}
   b5b7a:	4604      	mov	r4, r0
   b5b7c:	f7ff fff2 	bl	b5b64 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5b80:	4620      	mov	r0, r4
   b5b82:	2108      	movs	r1, #8
   b5b84:	f7fe fa89 	bl	b409a <_ZdlPvj>
   b5b88:	4620      	mov	r0, r4
   b5b8a:	bd10      	pop	{r4, pc}

000b5b8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b5b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5b90:	461f      	mov	r7, r3
   b5b92:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b5b96:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b5b9a:	4598      	cmp	r8, r3
   b5b9c:	4606      	mov	r6, r0
   b5b9e:	4615      	mov	r5, r2
   b5ba0:	d107      	bne.n	b5bb2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5ba2:	9907      	ldr	r1, [sp, #28]
   b5ba4:	f000 f8b4 	bl	b5d10 <_ZNKSt9type_infoeqERKS_>
   b5ba8:	b118      	cbz	r0, b5bb2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5baa:	7165      	strb	r5, [r4, #5]
   b5bac:	2000      	movs	r0, #0
   b5bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5bb2:	4639      	mov	r1, r7
   b5bb4:	4630      	mov	r0, r6
   b5bb6:	f000 f8ab 	bl	b5d10 <_ZNKSt9type_infoeqERKS_>
   b5bba:	2800      	cmp	r0, #0
   b5bbc:	d0f6      	beq.n	b5bac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b5bbe:	2301      	movs	r3, #1
   b5bc0:	f8c4 8000 	str.w	r8, [r4]
   b5bc4:	7125      	strb	r5, [r4, #4]
   b5bc6:	71a3      	strb	r3, [r4, #6]
   b5bc8:	e7f0      	b.n	b5bac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b5bca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b5bca:	b538      	push	{r3, r4, r5, lr}
   b5bcc:	4615      	mov	r5, r2
   b5bce:	461c      	mov	r4, r3
   b5bd0:	f000 f89e 	bl	b5d10 <_ZNKSt9type_infoeqERKS_>
   b5bd4:	b120      	cbz	r0, b5be0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b5bd6:	2308      	movs	r3, #8
   b5bd8:	60e3      	str	r3, [r4, #12]
   b5bda:	2306      	movs	r3, #6
   b5bdc:	6025      	str	r5, [r4, #0]
   b5bde:	7123      	strb	r3, [r4, #4]
   b5be0:	bd38      	pop	{r3, r4, r5, pc}

000b5be2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b5be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5be4:	4605      	mov	r5, r0
   b5be6:	460c      	mov	r4, r1
   b5be8:	9201      	str	r2, [sp, #4]
   b5bea:	461e      	mov	r6, r3
   b5bec:	f000 f890 	bl	b5d10 <_ZNKSt9type_infoeqERKS_>
   b5bf0:	b950      	cbnz	r0, b5c08 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5bf2:	2e03      	cmp	r6, #3
   b5bf4:	d808      	bhi.n	b5c08 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5bf6:	6823      	ldr	r3, [r4, #0]
   b5bf8:	9a01      	ldr	r2, [sp, #4]
   b5bfa:	695b      	ldr	r3, [r3, #20]
   b5bfc:	4629      	mov	r1, r5
   b5bfe:	4620      	mov	r0, r4
   b5c00:	b002      	add	sp, #8
   b5c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5c06:	4718      	bx	r3
   b5c08:	b002      	add	sp, #8
   b5c0a:	bd70      	pop	{r4, r5, r6, pc}

000b5c0c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b5c0c:	b510      	push	{r4, lr}
   b5c0e:	4b03      	ldr	r3, [pc, #12]	; (b5c1c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b5c10:	6003      	str	r3, [r0, #0]
   b5c12:	4604      	mov	r4, r0
   b5c14:	f7ff ffa6 	bl	b5b64 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5c18:	4620      	mov	r0, r4
   b5c1a:	bd10      	pop	{r4, pc}
   b5c1c:	000b6614 	.word	0x000b6614

000b5c20 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b5c20:	b510      	push	{r4, lr}
   b5c22:	4604      	mov	r4, r0
   b5c24:	f7ff fff2 	bl	b5c0c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b5c28:	4620      	mov	r0, r4
   b5c2a:	210c      	movs	r1, #12
   b5c2c:	f7fe fa35 	bl	b409a <_ZdlPvj>
   b5c30:	4620      	mov	r0, r4
   b5c32:	bd10      	pop	{r4, pc}

000b5c34 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b5c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5c36:	9f08      	ldr	r7, [sp, #32]
   b5c38:	4297      	cmp	r7, r2
   b5c3a:	4605      	mov	r5, r0
   b5c3c:	460e      	mov	r6, r1
   b5c3e:	4614      	mov	r4, r2
   b5c40:	d00a      	beq.n	b5c58 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b5c42:	68a8      	ldr	r0, [r5, #8]
   b5c44:	6802      	ldr	r2, [r0, #0]
   b5c46:	9708      	str	r7, [sp, #32]
   b5c48:	6a15      	ldr	r5, [r2, #32]
   b5c4a:	4631      	mov	r1, r6
   b5c4c:	4622      	mov	r2, r4
   b5c4e:	46ac      	mov	ip, r5
   b5c50:	b003      	add	sp, #12
   b5c52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5c56:	4760      	bx	ip
   b5c58:	4619      	mov	r1, r3
   b5c5a:	9301      	str	r3, [sp, #4]
   b5c5c:	f000 f858 	bl	b5d10 <_ZNKSt9type_infoeqERKS_>
   b5c60:	9b01      	ldr	r3, [sp, #4]
   b5c62:	2800      	cmp	r0, #0
   b5c64:	d0ed      	beq.n	b5c42 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b5c66:	2006      	movs	r0, #6
   b5c68:	b003      	add	sp, #12
   b5c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5c6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b5c6c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c70:	460d      	mov	r5, r1
   b5c72:	4619      	mov	r1, r3
   b5c74:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b5c78:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b5c7c:	4681      	mov	r9, r0
   b5c7e:	4617      	mov	r7, r2
   b5c80:	4698      	mov	r8, r3
   b5c82:	f000 f845 	bl	b5d10 <_ZNKSt9type_infoeqERKS_>
   b5c86:	b190      	cbz	r0, b5cae <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b5c88:	2d00      	cmp	r5, #0
   b5c8a:	6034      	str	r4, [r6, #0]
   b5c8c:	7137      	strb	r7, [r6, #4]
   b5c8e:	db09      	blt.n	b5ca4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b5c90:	1961      	adds	r1, r4, r5
   b5c92:	458a      	cmp	sl, r1
   b5c94:	bf0c      	ite	eq
   b5c96:	2106      	moveq	r1, #6
   b5c98:	2101      	movne	r1, #1
   b5c9a:	71b1      	strb	r1, [r6, #6]
   b5c9c:	2000      	movs	r0, #0
   b5c9e:	b001      	add	sp, #4
   b5ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5ca4:	3502      	adds	r5, #2
   b5ca6:	d1f9      	bne.n	b5c9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5ca8:	2301      	movs	r3, #1
   b5caa:	71b3      	strb	r3, [r6, #6]
   b5cac:	e7f6      	b.n	b5c9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5cae:	4554      	cmp	r4, sl
   b5cb0:	d106      	bne.n	b5cc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5cb2:	4659      	mov	r1, fp
   b5cb4:	4648      	mov	r0, r9
   b5cb6:	f000 f82b 	bl	b5d10 <_ZNKSt9type_infoeqERKS_>
   b5cba:	b108      	cbz	r0, b5cc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5cbc:	7177      	strb	r7, [r6, #5]
   b5cbe:	e7ed      	b.n	b5c9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5cc0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b5cc4:	6803      	ldr	r3, [r0, #0]
   b5cc6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b5cca:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b5cce:	69dc      	ldr	r4, [r3, #28]
   b5cd0:	463a      	mov	r2, r7
   b5cd2:	4643      	mov	r3, r8
   b5cd4:	4629      	mov	r1, r5
   b5cd6:	46a4      	mov	ip, r4
   b5cd8:	b001      	add	sp, #4
   b5cda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5cde:	4760      	bx	ip

000b5ce0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b5ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5ce4:	4607      	mov	r7, r0
   b5ce6:	460c      	mov	r4, r1
   b5ce8:	4615      	mov	r5, r2
   b5cea:	461e      	mov	r6, r3
   b5cec:	f7ff ff6d 	bl	b5bca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b5cf0:	b948      	cbnz	r0, b5d06 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b5cf2:	68b8      	ldr	r0, [r7, #8]
   b5cf4:	6803      	ldr	r3, [r0, #0]
   b5cf6:	699f      	ldr	r7, [r3, #24]
   b5cf8:	462a      	mov	r2, r5
   b5cfa:	4633      	mov	r3, r6
   b5cfc:	4621      	mov	r1, r4
   b5cfe:	46bc      	mov	ip, r7
   b5d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5d04:	4760      	bx	ip
   b5d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5d0a <_ZNSt9type_infoD1Ev>:
   b5d0a:	4770      	bx	lr

000b5d0c <_ZNKSt9type_info14__is_pointer_pEv>:
   b5d0c:	2000      	movs	r0, #0
   b5d0e:	4770      	bx	lr

000b5d10 <_ZNKSt9type_infoeqERKS_>:
   b5d10:	4281      	cmp	r1, r0
   b5d12:	b508      	push	{r3, lr}
   b5d14:	d00e      	beq.n	b5d34 <_ZNKSt9type_infoeqERKS_+0x24>
   b5d16:	6840      	ldr	r0, [r0, #4]
   b5d18:	7803      	ldrb	r3, [r0, #0]
   b5d1a:	2b2a      	cmp	r3, #42	; 0x2a
   b5d1c:	d00c      	beq.n	b5d38 <_ZNKSt9type_infoeqERKS_+0x28>
   b5d1e:	6849      	ldr	r1, [r1, #4]
   b5d20:	780b      	ldrb	r3, [r1, #0]
   b5d22:	2b2a      	cmp	r3, #42	; 0x2a
   b5d24:	bf08      	it	eq
   b5d26:	3101      	addeq	r1, #1
   b5d28:	f000 f852 	bl	b5dd0 <strcmp>
   b5d2c:	fab0 f080 	clz	r0, r0
   b5d30:	0940      	lsrs	r0, r0, #5
   b5d32:	bd08      	pop	{r3, pc}
   b5d34:	2001      	movs	r0, #1
   b5d36:	e7fc      	b.n	b5d32 <_ZNKSt9type_infoeqERKS_+0x22>
   b5d38:	2000      	movs	r0, #0
   b5d3a:	e7fa      	b.n	b5d32 <_ZNKSt9type_infoeqERKS_+0x22>

000b5d3c <atexit>:
   b5d3c:	2300      	movs	r3, #0
   b5d3e:	4601      	mov	r1, r0
   b5d40:	461a      	mov	r2, r3
   b5d42:	4618      	mov	r0, r3
   b5d44:	f000 b85e 	b.w	b5e04 <__register_exitproc>

000b5d48 <memcpy>:
   b5d48:	440a      	add	r2, r1
   b5d4a:	4291      	cmp	r1, r2
   b5d4c:	f100 33ff 	add.w	r3, r0, #4294967295
   b5d50:	d100      	bne.n	b5d54 <memcpy+0xc>
   b5d52:	4770      	bx	lr
   b5d54:	b510      	push	{r4, lr}
   b5d56:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5d5e:	4291      	cmp	r1, r2
   b5d60:	d1f9      	bne.n	b5d56 <memcpy+0xe>
   b5d62:	bd10      	pop	{r4, pc}

000b5d64 <memset>:
   b5d64:	4402      	add	r2, r0
   b5d66:	4603      	mov	r3, r0
   b5d68:	4293      	cmp	r3, r2
   b5d6a:	d100      	bne.n	b5d6e <memset+0xa>
   b5d6c:	4770      	bx	lr
   b5d6e:	f803 1b01 	strb.w	r1, [r3], #1
   b5d72:	e7f9      	b.n	b5d68 <memset+0x4>

000b5d74 <srand>:
   b5d74:	b538      	push	{r3, r4, r5, lr}
   b5d76:	4b10      	ldr	r3, [pc, #64]	; (b5db8 <srand+0x44>)
   b5d78:	681d      	ldr	r5, [r3, #0]
   b5d7a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5d7c:	4604      	mov	r4, r0
   b5d7e:	b9b3      	cbnz	r3, b5dae <srand+0x3a>
   b5d80:	2018      	movs	r0, #24
   b5d82:	f7fe fded 	bl	b4960 <malloc>
   b5d86:	4602      	mov	r2, r0
   b5d88:	63a8      	str	r0, [r5, #56]	; 0x38
   b5d8a:	b920      	cbnz	r0, b5d96 <srand+0x22>
   b5d8c:	4b0b      	ldr	r3, [pc, #44]	; (b5dbc <srand+0x48>)
   b5d8e:	480c      	ldr	r0, [pc, #48]	; (b5dc0 <srand+0x4c>)
   b5d90:	2142      	movs	r1, #66	; 0x42
   b5d92:	f7fe fe0d 	bl	b49b0 <__assert_func>
   b5d96:	490b      	ldr	r1, [pc, #44]	; (b5dc4 <srand+0x50>)
   b5d98:	4b0b      	ldr	r3, [pc, #44]	; (b5dc8 <srand+0x54>)
   b5d9a:	e9c0 1300 	strd	r1, r3, [r0]
   b5d9e:	4b0b      	ldr	r3, [pc, #44]	; (b5dcc <srand+0x58>)
   b5da0:	6083      	str	r3, [r0, #8]
   b5da2:	230b      	movs	r3, #11
   b5da4:	8183      	strh	r3, [r0, #12]
   b5da6:	2100      	movs	r1, #0
   b5da8:	2001      	movs	r0, #1
   b5daa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5dae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5db0:	2200      	movs	r2, #0
   b5db2:	611c      	str	r4, [r3, #16]
   b5db4:	615a      	str	r2, [r3, #20]
   b5db6:	bd38      	pop	{r3, r4, r5, pc}
   b5db8:	2003e5c0 	.word	0x2003e5c0
   b5dbc:	000b664d 	.word	0x000b664d
   b5dc0:	000b6664 	.word	0x000b6664
   b5dc4:	abcd330e 	.word	0xabcd330e
   b5dc8:	e66d1234 	.word	0xe66d1234
   b5dcc:	0005deec 	.word	0x0005deec

000b5dd0 <strcmp>:
   b5dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b5dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b5dd8:	2a01      	cmp	r2, #1
   b5dda:	bf28      	it	cs
   b5ddc:	429a      	cmpcs	r2, r3
   b5dde:	d0f7      	beq.n	b5dd0 <strcmp>
   b5de0:	1ad0      	subs	r0, r2, r3
   b5de2:	4770      	bx	lr

000b5de4 <strcpy>:
   b5de4:	4603      	mov	r3, r0
   b5de6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b5dea:	f803 2b01 	strb.w	r2, [r3], #1
   b5dee:	2a00      	cmp	r2, #0
   b5df0:	d1f9      	bne.n	b5de6 <strcpy+0x2>
   b5df2:	4770      	bx	lr

000b5df4 <strlen>:
   b5df4:	4603      	mov	r3, r0
   b5df6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5dfa:	2a00      	cmp	r2, #0
   b5dfc:	d1fb      	bne.n	b5df6 <strlen+0x2>
   b5dfe:	1a18      	subs	r0, r3, r0
   b5e00:	3801      	subs	r0, #1
   b5e02:	4770      	bx	lr

000b5e04 <__register_exitproc>:
   b5e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5e08:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5ec4 <__register_exitproc+0xc0>
   b5e0c:	4606      	mov	r6, r0
   b5e0e:	f8d8 0000 	ldr.w	r0, [r8]
   b5e12:	461f      	mov	r7, r3
   b5e14:	460d      	mov	r5, r1
   b5e16:	4691      	mov	r9, r2
   b5e18:	f000 f856 	bl	b5ec8 <__retarget_lock_acquire_recursive>
   b5e1c:	4b25      	ldr	r3, [pc, #148]	; (b5eb4 <__register_exitproc+0xb0>)
   b5e1e:	681c      	ldr	r4, [r3, #0]
   b5e20:	b934      	cbnz	r4, b5e30 <__register_exitproc+0x2c>
   b5e22:	4c25      	ldr	r4, [pc, #148]	; (b5eb8 <__register_exitproc+0xb4>)
   b5e24:	601c      	str	r4, [r3, #0]
   b5e26:	4b25      	ldr	r3, [pc, #148]	; (b5ebc <__register_exitproc+0xb8>)
   b5e28:	b113      	cbz	r3, b5e30 <__register_exitproc+0x2c>
   b5e2a:	681b      	ldr	r3, [r3, #0]
   b5e2c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5e30:	6863      	ldr	r3, [r4, #4]
   b5e32:	2b1f      	cmp	r3, #31
   b5e34:	dd07      	ble.n	b5e46 <__register_exitproc+0x42>
   b5e36:	f8d8 0000 	ldr.w	r0, [r8]
   b5e3a:	f000 f847 	bl	b5ecc <__retarget_lock_release_recursive>
   b5e3e:	f04f 30ff 	mov.w	r0, #4294967295
   b5e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5e46:	b34e      	cbz	r6, b5e9c <__register_exitproc+0x98>
   b5e48:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5e4c:	b988      	cbnz	r0, b5e72 <__register_exitproc+0x6e>
   b5e4e:	4b1c      	ldr	r3, [pc, #112]	; (b5ec0 <__register_exitproc+0xbc>)
   b5e50:	b923      	cbnz	r3, b5e5c <__register_exitproc+0x58>
   b5e52:	f8d8 0000 	ldr.w	r0, [r8]
   b5e56:	f000 f838 	bl	b5eca <__retarget_lock_release>
   b5e5a:	e7f0      	b.n	b5e3e <__register_exitproc+0x3a>
   b5e5c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5e60:	f7fe fd7e 	bl	b4960 <malloc>
   b5e64:	2800      	cmp	r0, #0
   b5e66:	d0f4      	beq.n	b5e52 <__register_exitproc+0x4e>
   b5e68:	2300      	movs	r3, #0
   b5e6a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5e6e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5e72:	6863      	ldr	r3, [r4, #4]
   b5e74:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5e78:	2201      	movs	r2, #1
   b5e7a:	409a      	lsls	r2, r3
   b5e7c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5e80:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5e84:	4313      	orrs	r3, r2
   b5e86:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5e8a:	2e02      	cmp	r6, #2
   b5e8c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5e90:	bf02      	ittt	eq
   b5e92:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5e96:	4313      	orreq	r3, r2
   b5e98:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5e9c:	6863      	ldr	r3, [r4, #4]
   b5e9e:	f8d8 0000 	ldr.w	r0, [r8]
   b5ea2:	1c5a      	adds	r2, r3, #1
   b5ea4:	3302      	adds	r3, #2
   b5ea6:	6062      	str	r2, [r4, #4]
   b5ea8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5eac:	f000 f80e 	bl	b5ecc <__retarget_lock_release_recursive>
   b5eb0:	2000      	movs	r0, #0
   b5eb2:	e7c6      	b.n	b5e42 <__register_exitproc+0x3e>
   b5eb4:	2003e7e8 	.word	0x2003e7e8
   b5eb8:	2003e75c 	.word	0x2003e75c
   b5ebc:	00000000 	.word	0x00000000
   b5ec0:	000b4961 	.word	0x000b4961
   b5ec4:	2003e624 	.word	0x2003e624

000b5ec8 <__retarget_lock_acquire_recursive>:
   b5ec8:	4770      	bx	lr

000b5eca <__retarget_lock_release>:
   b5eca:	4770      	bx	lr

000b5ecc <__retarget_lock_release_recursive>:
   b5ecc:	4770      	bx	lr

000b5ece <link_code_end>:
	...

000b5ed0 <dynalib_user>:
   b5ed0:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5ee0:	0000 0000 6f4e 4320 6168 676e 2065 202d     ....No Change - 
   b5ef0:	6143 636e 6c65 696c 676e 4320 444d 000a     Cancelling CMD..
   b5f00:	227b 6e6f 3a22 7274 6575 222c 6173 2274     {"on":true,"sat"
   b5f10:	003a 222c 7262 2269 003a 222c 7568 2265     :.,"bri":.,"hue"
   b5f20:	003a 227b 6e6f 3a22 6166 736c 7d65 5300     :.{"on":false}.S
   b5f30:	6e65 6964 676e 4320 6d6f 616d 646e 7420     ending Command t
   b5f40:	206f 7548 0065 5550 2054 612f 6970 002f     o Hue.PUT /api/.
   b5f50:	6c2f 6769 7468 2f73 2f00 7473 7461 2065     /lights/./state 
   b5f60:	5448 5054 312f 312e 4800 736f 3a74 0020     HTTP/1.1.Host: .
   b5f70:	6f43 746e 6e65 2d74 654c 676e 6874 203a     Content-Length: 
   b5f80:	4300 6e6f 6574 746e 542d 7079 3a65 7420     .Content-Type: t
   b5f90:	7865 2f74 6c70 6961 3b6e 6863 7261 6573     ext/plain;charse
   b5fa0:	3d74 5455 2d46 0038 7246 6d6f 4820 6575     t=UTF-8.From Hue
   b5fb0:	5300 6977 6374 4f68 204e 6925 0a20 3c00     .SwitchON %i ..<
   b5fc0:	783f 6c6d 7620 7265 6973 6e6f 223d 2e31     ?xml version="1.
   b5fd0:	2230 6520 636e 646f 6e69 3d67 7522 6674     0" encoding="utf
   b5fe0:	382d 3f22 3c3e 3a73 6e45 6576 6f6c 6570     -8"?><s:Envelope
   b5ff0:	7820 6c6d 736e 733a 223d 7468 7074 2f3a      xmlns:s="http:/
   b6000:	732f 6863 6d65 7361 782e 6c6d 6f73 7061     /schemas.xmlsoap
   b6010:	6f2e 6772 732f 616f 2f70 6e65 6576 6f6c     .org/soap/envelo
   b6020:	6570 222f 7320 653a 636e 646f 6e69 5367     pe/" s:encodingS
   b6030:	7974 656c 223d 7468 7074 2f3a 732f 6863     tyle="http://sch
   b6040:	6d65 7361 782e 6c6d 6f73 7061 6f2e 6772     emas.xmlsoap.org
   b6050:	732f 616f 2f70 6e65 6f63 6964 676e 222f     /soap/encoding/"
   b6060:	3c3e 3a73 6f42 7964 3c3e 3a75 6553 4274     ><s:Body><u:SetB
   b6070:	6e69 7261 5379 6174 6574 7820 6c6d 736e     inaryState xmlns
   b6080:	753a 223d 7275 3a6e 6542 6b6c 6e69 733a     :u="urn:Belkin:s
   b6090:	7265 6976 6563 623a 7361 6369 7665 6e65     ervice:basiceven
   b60a0:	3a74 2231 3c3e 6942 616e 7972 7453 7461     t:1"><BinaryStat
   b60b0:	3e65 3c31 422f 6e69 7261 5379 6174 6574     e>1</BinaryState
   b60c0:	3c3e 752f 533a 7465 6942 616e 7972 7453     ></u:SetBinarySt
   b60d0:	7461 3e65 2f3c 3a73 6f42 7964 3c3e 732f     ate></s:Body></s
   b60e0:	453a 766e 6c65 706f 3e65 5000 534f 2054     :Envelope>.POST 
   b60f0:	752f 6e70 2f70 6f63 746e 6f72 2f6c 6162     /upnp/control/ba
   b6100:	6973 6563 6576 746e 2031 5448 5054 312f     sicevent1 HTTP/1
   b6110:	312e 4300 6e6f 6574 746e 542d 7079 3a65     .1.Content-Type:
   b6120:	7420 7865 2f74 6d78 3b6c 6320 6168 7372      text/xml; chars
   b6130:	7465 753d 6674 382d 5300 414f 4150 5443     et=utf-8.SOAPACT
   b6140:	4f49 3a4e 2220 7275 3a6e 6542 6b6c 6e69     ION: "urn:Belkin
   b6150:	733a 7265 6976 6563 623a 7361 6369 7665     :service:basicev
   b6160:	6e65 3a74 2331 6553 4274 6e69 7261 5379     ent:1#SetBinaryS
   b6170:	6174 6574 0022 6f43 6e6e 6365 6974 6e6f     tate".Connection
   b6180:	203a 656b 7065 612d 696c 6576 7300 6977     : keep-alive.swi
   b6190:	6374 4f68 4646 2520 2069 000a 3f3c 6d78     tchOFF %i ..<?xm
   b61a0:	206c 6576 7372 6f69 3d6e 3122 302e 2022     l version="1.0" 
   b61b0:	6e65 6f63 6964 676e 223d 7475 2d66 2238     encoding="utf-8"
   b61c0:	3e3f 733c 453a 766e 6c65 706f 2065 6d78     ?><s:Envelope xm
   b61d0:	6e6c 3a73 3d73 6822 7474 3a70 2f2f 6373     lns:s="http://sc
   b61e0:	6568 616d 2e73 6d78 736c 616f 2e70 726f     hemas.xmlsoap.or
   b61f0:	2f67 6f73 7061 652f 766e 6c65 706f 2f65     g/soap/envelope/
   b6200:	2022 3a73 6e65 6f63 6964 676e 7453 6c79     " s:encodingStyl
   b6210:	3d65 6822 7474 3a70 2f2f 6373 6568 616d     e="http://schema
   b6220:	2e73 6d78 736c 616f 2e70 726f 2f67 6f73     s.xmlsoap.org/so
   b6230:	7061 652f 636e 646f 6e69 2f67 3e22 733c     ap/encoding/"><s
   b6240:	423a 646f 3e79 753c 533a 7465 6942 616e     :Body><u:SetBina
   b6250:	7972 7453 7461 2065 6d78 6e6c 3a73 3d75     ryState xmlns:u=
   b6260:	7522 6e72 423a 6c65 696b 3a6e 6573 7672     "urn:Belkin:serv
   b6270:	6369 3a65 6162 6973 6563 6576 746e 313a     ice:basicevent:1
   b6280:	3e22 423c 6e69 7261 5379 6174 6574 303e     "><BinaryState>0
   b6290:	2f3c 6942 616e 7972 7453 7461 3e65 2f3c     </BinaryState></
   b62a0:	3a75 6553 4274 6e69 7261 5379 6174 6574     u:SetBinaryState
   b62b0:	3c3e 732f 423a 646f 3e79 2f3c 3a73 6e45     ></s:Body></s:En
   b62c0:	6576 6f6c 6570 003e 6f49 4e54 7465 6f77     velope>.IoTNetwo
   b62d0:	6b72 2e00 0a00 000a 7554 6e72 6e69 2067     rk......Turning 
   b62e0:	6e6f 5720 6d65 236f 2520 0a69 5400 7275     on Wemo# %i..Tur
   b62f0:	696e 676e 6f20 6666 5720 6d65 236f 2520     ning off Wemo# %
   b6300:	0a69 7000 6f68 6f74 6156 756c 3d65 6e61     i..photoValue=an
   b6310:	6c61 676f 6552 6461 2520 0d64 3100 3239     alogRead %d..192
   b6320:	312e 3836 312e 332e 0030 3931 2e32 3631     .168.1.30.192.16
   b6330:	2e38 2e31 3133 3100 3239 312e 3836 312e     8.1.31.192.168.1
   b6340:	332e 0032 3931 2e32 3631 2e38 2e31 3333     .32.192.168.1.33
   b6350:	3100 3239 312e 3836 312e 332e 0034 0000     .192.168.1.34...

000b6360 <_ZTVN5spark13EthernetClassE>:
	...
   b6368:	4a2f 000b 4a25 000b 4a1b 000b 4a11 000b     /J..%J...J...J..
   b6378:	4a05 000b 49f9 000b 57f5 000b 57fd 000b     .J...I...W...W..
   b6388:	49ed 000b 49e5 000b 49db 000b 49d1 000b     .I...I...I...I..
   b6398:	582d 000b                                   -X..

000b639c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b63a4:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b63b4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b63c4 <_ZTV9IPAddress>:
	...
   b63cc:	4e4d 000b 4e3d 000b 4e3f 000b               MN..=N..?N..

000b63d8 <_ZTV9USBSerial>:
	...
   b63e0:	4f5f 000b 4fc7 000b 4f9d 000b 4ba5 000b     _O...O...O...K..
   b63f0:	4f8f 000b 4f61 000b 4f71 000b 4fc1 000b     .O..aO..qO...O..
   b6400:	4f81 000b 4f59 000b                         .O..YO..

000b6408 <_ZTV11USARTSerial>:
	...
   b6410:	5069 000b 50d5 000b 50ad 000b 4ba5 000b     iP...P...P...K..
   b6420:	507d 000b 5099 000b 508b 000b 50a7 000b     }P...P...P...P..
   b6430:	506b 000b 506f 000b                         kP..oP..

000b6438 <_ZTV7TwoWire>:
	...
   b6440:	510d 000b 5157 000b 512f 000b 510f 000b     .Q..WQ../Q...Q..
   b6450:	5137 000b 513f 000b 5147 000b 514f 000b     7Q..?Q..GQ..OQ..
   b6460:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b6470:	2072 203d 6425 0000                         r = %d..

000b6478 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6480:	5225 000b 5249 000b 5733 000b 5257 000b     %R..IR..3W..WR..
   b6490:	5229 000b                                   )R..

000b6494 <_ZTV9TCPClient>:
	...
   b649c:	40cd 000b 4101 000b 51a1 000b 51bb 000b     .@...A...Q...Q..
   b64ac:	55c9 000b 51e5 000b 543f 000b 5219 000b     .U...Q..?T...R..
   b64bc:	54d1 000b 5311 000b 546d 000b 567d 000b     .T...S..mT..}V..
   b64cc:	540d 000b 521b 000b 51cd 000b 525d 000b     .T...R...Q..]R..
   b64dc:	52f1 000b                                   .R..

000b64e0 <_ZTVN5spark9WiFiClassE>:
	...
   b64e8:	5797 000b 578d 000b 5783 000b 5739 000b     .W...W...W..9W..
   b64f8:	5777 000b 576b 000b 57f5 000b 57fd 000b     wW..kW...W...W..
   b6508:	575f 000b 5757 000b 574d 000b 5743 000b     _W..WW..MW..CW..
   b6518:	582d 000b                                   -X..

000b651c <_ZTVN5spark12NetworkClassE>:
	...
   b6524:	57b5 000b 57bf 000b 57c9 000b 57d3 000b     .W...W...W...W..
   b6534:	57dd 000b 57e9 000b 57f5 000b 57fd 000b     .W...W...W...W..
   b6544:	5805 000b 5811 000b 5819 000b 5823 000b     .X...X...X..#X..
   b6554:	582d 000b                                   -X..

000b6558 <_ZSt7nothrow>:
	...

000b6559 <_ZTSSt19_Sp_make_shared_tag>:
   b6559:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b6569:	6572 5f64 6174 0067 0000                     red_tag....

000b6574 <_ZTISt19_Sp_make_shared_tag>:
   b6574:	65b4 000b 6559 000b                         .e..Ye..

000b657c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b657c:	6614 000b 6588 000b 6638 000b               .f...e..8f..

000b6588 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b6588:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b6598:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b65a8:	0045 0000                                   E...

000b65ac <_ZTVN10__cxxabiv117__class_type_infoE>:
   b65ac:	0000 0000 657c 000b 5b65 000b 5b79 000b     ....|e..e[..y[..
   b65bc:	5d0d 000b 5d0d 000b 5be3 000b 5b25 000b     .]...]...[..%[..
   b65cc:	5bcb 000b 5b8d 000b 5b57 000b               .[...[..W[..

000b65d8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b65d8:	6614 000b 65e4 000b 657c 000b               .f...e..|e..

000b65e4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b65e4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b65f4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b6604:	666e 456f 0000 0000                         nfoE....

000b660c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b660c:	0000 0000 65d8 000b 5c0d 000b 5c21 000b     .....e...\..!\..
   b661c:	5d0d 000b 5d0d 000b 5be3 000b 5b25 000b     .]...]...[..%[..
   b662c:	5ce1 000b 5c6d 000b 5c35 000b               .\..m\..5\..

000b6638 <_ZTISt9type_info>:
   b6638:	65b4 000b 6640 000b                         .e..@f..

000b6640 <_ZTSSt9type_info>:
   b6640:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b6650:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b6660:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b6670:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b6680:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b6690:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b66a0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b66b0:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b66c0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b66d0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b66e1 <link_const_variable_data_end>:
   b66e1:	00          	.byte	0x00
	...

000b66e4 <link_constructors_location>:
   b66e4:	000b43e9 	.word	0x000b43e9
   b66e8:	000b4519 	.word	0x000b4519
   b66ec:	000b4a39 	.word	0x000b4a39
   b66f0:	000b4a61 	.word	0x000b4a61
   b66f4:	000b4b95 	.word	0x000b4b95
   b66f8:	000b4ccd 	.word	0x000b4ccd
   b66fc:	000b4cdd 	.word	0x000b4cdd
   b6700:	000b4cf9 	.word	0x000b4cf9
   b6704:	000b57a1 	.word	0x000b57a1
   b6708:	000b5905 	.word	0x000b5905

000b670c <link_constructors_end>:
   b670c:	00000000 	.word	0x00000000
